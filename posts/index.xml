<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Nick Ebbitt</title><link>https://www.nickebbitt.com/posts/</link><description>Recent content in Posts on Nick Ebbitt</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 20 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.nickebbitt.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>JManc 2024</title><link>https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/</link><pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/</guid><description>tl;dr Great day, great people, great discussions and great team of dis-organisers!
Whoever comes are the right people!
Thanks to all who attended, it&amp;rsquo;s down to each and every one of you that JManc Unconference 2024 was a success!
See you next year! 😀
intro In January this year we decided to test the interest of the Manchester Java Community on whether they were up for another edition of the JManc Unconference.</description><content>&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;p>Great day, great people, great discussions and great team of &lt;em>dis-organisers&lt;/em>!&lt;/p>
&lt;blockquote>
&lt;p>Whoever comes are the right people!&lt;/p>
&lt;/blockquote>
&lt;p>Thanks to all who attended, it&amp;rsquo;s down to each and every one of you that JManc Unconference 2024 was a success!&lt;/p>
&lt;p>See you next year! 😀&lt;/p>
&lt;h2 id="intro">intro&lt;/h2>
&lt;p>In January this year we decided to test the interest of the Manchester Java Community on whether they were up for another edition of the &lt;a href="https://jmanc.org">JManc Unconference&lt;/a>.
We sent out a survey to our members and from the responses received there was unanimous support for to us to run it again.
This gave &lt;a href="https://www.linkedin.com/in/jsbullock/">Jon Bullock&lt;/a>, &lt;a href="https://www.linkedin.com/in/david-underwood-6b929858/">Dave Underwood&lt;/a> and I the motivation we needed to put plans into motion for the 3rd edition of JManc Unconference!&lt;/p>
&lt;p>&lt;img alt="JManc 2024" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/jmanc-2024.png">&lt;/p>
&lt;h2 id="planning">planning&lt;/h2>
&lt;p>We had a few key decisions to make to get things started including where and when we would hold the unconference.&lt;/p>
&lt;p>In previous years we&amp;rsquo;d hosted the event at &lt;a href="https://careers.autotrader.co.uk">Auto Trader&amp;rsquo;s&lt;/a> offices in Manchester city centre which had worked really well and we were keen to explore if this would be possible again.
We have a great relationship with Auto Trader at the MJC so we proposed the idea to &lt;a href="https://www.linkedin.com/in/claireisherwood/">Claire Isherwood&lt;/a> and she was very enthusiastic.
Within a few days we were able to confirm Auto Trader as the venue and just needed to pin down a date.&lt;/p>
&lt;p>We had a rough timing in mind of June, similar to previous years, however we were unsure whether to go with a Saturday as in previous years or to switch to a weekday.
In the end we chose to go with a weekday and landed on Friday 28th June to run the event.
Our thoughts were that running JManc on a weekday would be more appealing to a wider range of people by allowing them to treat it like a training day from work, and also to avoid a conflict with people&amp;rsquo;s precious weekends.&lt;/p>
&lt;p>Another key decision came down to whether we would charge people to attend or not.
We strongly believe in keeping the cost down for attendees to us ensuring that the event is as accessible as possible to all who might want to attend.
The challenge with events that are free is that the actual numbers for people attending on the day can be quite unpredictable.
Through running normal meetups over the years, and from previous JMancs, we have a rough rule of thumb that around 40% of people registered will not actually turn up to a free event.&lt;/p>
&lt;p>With this in mind we decided to release 70 tickets with the hope that 40 or so of them would turn up on the day.
If 70 people did turn up on the day then it wouldn&amp;rsquo;t have been a problem, maybe just a little more chaotic that we&amp;rsquo;d been planning for 😬&lt;/p>
&lt;p>One part of JManc that&amp;rsquo;s a little unconventional for an unconference is to have a keynote speaker.
With a carefully chosen speaker we believe it adds a little more value for the attendees.
This year we invited &lt;a href="https://www.helenjoscott.com">Helen Scott&lt;/a> from JetBrains to join us which she enthusiastically accepted.
Huge thanks to Helen for offering her time to help JManc be a success.&lt;/p>
&lt;p>&lt;img alt="Helen Scott" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/helenscott.jpg">&lt;/p>
&lt;p>The last aspect we had to consider that&amp;rsquo;s been really successful in previous years was the evening social.
The social provides a great way to relax and reflect following an intense day of discussions.
We were delighted to partner with &lt;a href="https://www.interquestgroup.com/brands/ecom/about-us">ECOM Recruitment&lt;/a> on this with them agreeing to sponsor the social by putting some cash behind the bar at &lt;a href="https://homemcr.org">Home&lt;/a> to cover a few drinks and nibbles for everyone.&lt;/p>
&lt;p>After all the planning it then boils down to promotion!
With the help of our partners and friends of the MJC (such as the &lt;a href="https://junconf.org">JUnconference Alliance&lt;/a>, &lt;a href="https://www.reframe-wit.com">ReframeIT&lt;/a> and &lt;a href="https://foojay.io">Foojay&lt;/a>) we started to spread the word with the hope reaching a diverse range of people who might be interested in attending an event such as this.&lt;/p>
&lt;p>&lt;img alt="JManc Promo" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/jmanc-promo.jpeg">&lt;/p>
&lt;p>Something that&amp;rsquo;s really important for us as organisers is to keep things simple but there&amp;rsquo;s an essential level of complexity that comes with running an event like this.
Huge thanks to &lt;a href="https://www.linkedin.com/in/claireisherwood/">Claire Isherwood&lt;/a> (and team at Auto Trader), &lt;a href="https://www.linkedin.com/in/garethpike/">Gareth Pike&lt;/a> and &lt;a href="https://www.linkedin.com/in/robertsugden/">Rob Sugden&lt;/a> for helping manage this complexity and reducing the stress during the run up to the day.&lt;/p>
&lt;h2 id="the-day">the day&lt;/h2>
&lt;p>&lt;img alt="Welcome" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/welcome.jpg">&lt;/p>
&lt;p>Our predictions on the number of attendees were pretty much spot on with just under 40 people attending.
My main concern with the attendee drop-off rate comes down to waste.
The last thing we wanted it was for Auto Trader to plan catering for 70 people and the only half of that number turn up.
Fortunately we were able to confirm the exact numbers to the catering team at Auto Trader on the morning of the conference so this wasn&amp;rsquo;t a problem.&lt;/p>
&lt;p>We only really had full access to the event space on the morning of the conference however we visited a few weeks earlier to make a rough plan for how we&amp;rsquo;d make best use of it.
This meant the organising team arriving early to put the plan into action.&lt;/p>
&lt;h3 id="the-marketplace--discussion-spaces">the marketplace &amp;amp; discussion spaces&lt;/h3>
&lt;p>We created a main space where attendees would congregate on arrival for coffee and pastries.
This space was also where we created &amp;ldquo;The Marketplace&amp;rdquo;, a key area for the unconference where attendees could propose their topic ideas, vote on their favourites and we could create the schedule.
Throughout the day attendees revisited The Marketplace to connect with others, propose new topics and choose their next sessions.&lt;/p>
&lt;p>&lt;img alt="The Marketplace" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/marketplace-0.jpeg">&lt;/p>
&lt;p>On attendees arriving the first role of the &lt;em>&amp;ldquo;dis-organisers&amp;rdquo;&lt;/em> was to get the new arrivals straight into the mindset of an unconference and thinking about what they would either like to share or learn about.
This was some attendees first unconference experience so we led by example by proposing some topics for discussion and encouraged others to do the same.&lt;/p>
&lt;p>&lt;img alt="The Marketplace" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/marketplace-1.jpg">&lt;/p>
&lt;p>We also created 4 spaces where the actual unconference sessions would happen.
One of the spaces already had a name in the Auditorium but for the others we naturally channelled our inner geek and called them Hot Spot, The Heap and Garbage Collection.&lt;/p>
&lt;p>&lt;img alt="The Heap" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/IMG_1807.jpeg">&lt;/p>
&lt;p>Immediately before the keynote we did our first round of dot voting on the topics proposed so far.
This approach ensures that it&amp;rsquo;s the attendees who democratically decide the schedule for the day.&lt;/p>
&lt;p>&lt;img alt="dot voting" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/JMac_2023-018.jpg">&lt;/p>
&lt;h3 id="keynote">keynote&lt;/h3>
&lt;p>The Auditorium also provided the perfect setting for our keynote session.&lt;/p>
&lt;p>&lt;img alt="auditorium" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/auditorium.jpg">&lt;/p>
&lt;p>The dis-organisers first gave a brief intro JManc and set the scene for how we were hoping the day would go.&lt;/p>
&lt;p>&lt;img alt="intro" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/JMac_2023-039.jpg">&lt;/p>
&lt;p>Helen then took attendees on a tour of AI, tooling and ways of working covering some of the history and then focusing in on the practical reality of AI today with some predictions for the future.&lt;/p>
&lt;p>&lt;img alt="keynote" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/JMac_2023-051.jpg">&lt;/p>
&lt;p>Unfortunately for myself, Jon and Dave we had to the leave the keynote half way through to go and create the morning schedule out the sessions that had been voted on.
This part is easier said than done with there often being various competing topics that are highly voted.&lt;/p>
&lt;h3 id="the-schedule">the schedule&lt;/h3>
&lt;p>As an attendee, the nature of any conference is that, unless it&amp;rsquo;s single track, you are more than likely going to have a clash between multiple sessions with topics you are interested in happening at the same time.
We tried our best to avoid clashes between the most popular topics and I hope we managed to make most people happy.&lt;/p>
&lt;p>&lt;img alt="schedule" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/schedule.jpeg">&lt;/p>
&lt;p>Based on the actual number of people on the day we decided to stick with 3 tracks using the Auditorium for the most popular session in each slot.&lt;/p>
&lt;p>Following the keynote and a short break we kicked off the unconference style sessions.&lt;/p>
&lt;p>&lt;img alt="GC Session" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/JMac_2023-091.jpg">&lt;/p>
&lt;p>&lt;img alt="GC Session" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/JMac_2023-110.jpg">&lt;/p>
&lt;p>&lt;img alt="Auditorium Session" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/JMac_2023-117.jpg">&lt;/p>
&lt;p>The sessions on the day covered a wide variety of topics such as:&lt;/p>
&lt;ul>
&lt;li>AI and its various applications in software engineering (obviously)&lt;/li>
&lt;li>Chaos Engineering / Fault Injection with Istio service mesh&lt;/li>
&lt;li>Java in Containers&lt;/li>
&lt;li>Network Micro-segmentation on Kubernetes&lt;/li>
&lt;li>the latest Java language features and developments&lt;/li>
&lt;li>JVM architecture&lt;/li>
&lt;li>other JVM languages&lt;/li>
&lt;li>Java &amp;amp; serverless&lt;/li>
&lt;li>embedded Java&lt;/li>
&lt;li>modern testing practices&lt;/li>
&lt;li>ways or working handling distractions, how to focus, teams/slack etiquette&lt;/li>
&lt;/ul>
&lt;p>As you can see this is a diverse range of content, and not all Java/JVM specific.&lt;/p>
&lt;p>&lt;img alt="session-01" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/session-01.jpeg">&lt;/p>
&lt;p>&lt;img alt="session-02" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/session-02.jpeg">&lt;/p>
&lt;p>&lt;img alt="session-03" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/session-03.jpeg">&lt;/p>
&lt;h3 id="evening-social">evening social&lt;/h3>
&lt;p>The day was super busy and was over before we knew it and the evening social provides the ideal way to relax and reflect.
ECOM provided the food and drinks and around half the attendees hung around to continue the conversations and begin new ones.&lt;/p>
&lt;h2 id="retro">retro&lt;/h2>
&lt;p>In previous years we&amp;rsquo;ve ran a more structured retro session which has been a really nice touch however this year we kept it simple and just asked for feedback on post-its as people left at the end.
I think this worked well, and thankfully almost 100% of feedback was positive.&lt;/p>
&lt;p>&lt;img alt="feedback" src="https://www.nickebbitt.com/blog/2024/07/20/jmanc-2024/feedback.jpeg">&lt;/p>
&lt;p>The organising group of JManc plan to run a retro in the coming weeks to review what worked and what didn&amp;rsquo;t across all aspects.
A few things that come to mind for me that will feed into this are:&lt;/p>
&lt;ul>
&lt;li>how can improve the diversity of JManc?&lt;/li>
&lt;li>with Manchester having great universities how we can connect with them to encourage greater attendance from that demographic?&lt;/li>
&lt;li>how can we attract more Java experts to JManc? We have many connections with people from communities like Foojay and Java User Groups (JUGs) across the world and it would be awesome to tap into those and see some Java SMEs in attendance next year.&lt;/li>
&lt;li>is a single day unconference enough?&lt;/li>
&lt;/ul>
&lt;h2 id="future">future&lt;/h2>
&lt;p>Apologies for such a long post but this is has been a great way for me to reflect on this year&amp;rsquo;s JManc and really think about the whole process from idea to execution.
I&amp;rsquo;m delighted that it went well and it&amp;rsquo;s really been a pleasure collaborating with the MJC leadership and our sponsors to make it a success.&lt;/p>
&lt;p>The positive experience definitely leaves me motivated to run JManc again in 2025 and I&amp;rsquo;m hoping the rest of the team feel the same, I&amp;rsquo;m fairly confident they do.&lt;/p>
&lt;p>I think the format we use for JManc works really well and I don&amp;rsquo;t feel there&amp;rsquo;s a need to change it.
However, having experienced unconferences such as &lt;a href="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/">JCrete&lt;/a> and &lt;a href="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/">JAlba&lt;/a> I&amp;rsquo;d love to explore whether a multi-day unconference in Manchester could work.&lt;/p>
&lt;p>With that thought I&amp;rsquo;ll leave it here.
Hopefully we&amp;rsquo;ll see you all again next year!&lt;/p></content></item><item><title>Structure logging in Java</title><link>https://www.nickebbitt.com/blog/2024/01/11/structure-logging-in-java/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2024/01/11/structure-logging-in-java/</guid><description>Key takeaways:
why structured logging? options slf4j and logback what else?</description><content>&lt;p>Key takeaways:&lt;/p>
&lt;ul>
&lt;li>why structured logging?&lt;/li>
&lt;li>options&lt;/li>
&lt;li>slf4j and logback&lt;/li>
&lt;li>what else?&lt;/li>
&lt;/ul></content></item><item><title>The story of a Java 17 native memory leak</title><link>https://www.nickebbitt.com/blog/2022/01/26/the-story-of-a-java-17-native-memory-leak/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2022/01/26/the-story-of-a-java-17-native-memory-leak/</guid><description>Context When Java 17 was released in September we (the platform team at Auto Trader) were fairly quick to provide a new Docker base image to allow our developers to gain the benefits of the new goodness in the JDK available since Java 11, the previous LTS version.
Over the course of a few years we&amp;rsquo;ve standardised the way the JVM is configured out of the box for any new applications that make use of the base image.</description><content>&lt;h2 id="context">Context&lt;/h2>
&lt;p>When Java 17 was released in September we (the platform team at &lt;a href="https://careers.autotrader.co.uk">Auto Trader&lt;/a>) were fairly quick to provide a new Docker base image to allow our developers to gain the benefits of the new goodness in the JDK available since Java 11, the previous LTS version.&lt;/p>
&lt;p>Over the course of a few years we&amp;rsquo;ve standardised the way the JVM is configured out of the box for any new applications that make use of the base image.
In general, this provides product teams with a good default starting point from which to get up &amp;amp; running quickly with any new service they plan to deploy.&lt;/p>
&lt;p>Up until the release of Java 17 the majority of workloads targetted Java 11 which by default uses the G1 garbage collector (G1GC).&lt;/p>
&lt;p>One decision we made therefore was to enable &lt;a href="https://openjdk.java.net/jeps/192">String Deduplication&lt;/a> (&lt;code>-XX:+UseStringDeduplication&lt;/code>) by default for all workloads.
This goal of this flag is to reduce the live heap size by automatically deduplicating the use of duplicate strings.
This achieved the desired result, reducing the overall memory footprint across our platform.&lt;/p>
&lt;h2 id="discovery">Discovery&lt;/h2>
&lt;p>The new Java 17 base image was adopted and deployed through to production for a number of services pretty much straight away.&lt;/p>
&lt;p>Everything looked good.&lt;/p>
&lt;p>In general we were seeing a reduced memory footprint across all workloads, as well better metrics around GC frequency and times due to the muiltitude of improvements made in the JVM since Java 11.&lt;/p>
&lt;p>Then, after a few days, we noticed that the overall memory footprint for a few of the services was slowly increasing.&lt;/p>
&lt;p>As part of the Java base images we start applications with the &lt;a href="https://github.com/prometheus/jmx_exporter">Prometheus JMX Exporter&lt;/a> agent.
This stands up a simple web server alongside the application that consumes and exposes the JVM&amp;rsquo;s JMX management beans as Prometheus metrics.
When a service is deployed a scrape is automatically configured to pull the metrics into Prometheus.&lt;/p>
&lt;p>From these metrics we could quite quickly see that both the heap and non-heap memory areas were behaving as expected, no obvious slow memory leak there.
The direct memory looked fine too.&lt;/p>
&lt;p>This meant we were dealing with other native memory usage being consumed by the process.&lt;/p>
&lt;p>At this point I reached for &lt;a href="https://docs.oracle.com/en/java/javase/17/vm/native-memory-tracking.html">Native Memory Tracking&lt;/a> but this involved enabling it via JVM option and then using the &lt;code>jcmd&lt;/code> tool against live workloads.&lt;/p>
&lt;p>As the leak was pretty slow our first attempts with this didn&amp;rsquo;t provide anything useful.&lt;/p>
&lt;p>Unsure where to look next I decided to see if anyone in the community was seeing similar issues.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">&lt;a href="https://twitter.com/hashtag/Java?src=hash&amp;amp;ref_src=twsrc%5Etfw">#Java&lt;/a> people who are using Java 17 - has anyone noticed a change in their app&amp;#39;s memory usage since you upgraded?&lt;br>&lt;br>On some apps we&amp;#39;re seeing slow memory growth/leak. It&amp;#39;s appears to be at the OS/native memory level as the heap is stable, as are the non-heap and direct memory areas &lt;a href="https://t.co/rv5J2Dxdgp">pic.twitter.com/rv5J2Dxdgp&lt;/a>&lt;/p>&amp;mdash; Nick Ebbitt (@nickebbitt) &lt;a href="https://twitter.com/nickebbitt/status/1453284230964912153?ref_src=twsrc%5Etfw">October 27, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Unfortunately this didn&amp;rsquo;t get much traction.&lt;/p>
&lt;h2 id="trial--error">Trial &amp;amp; Error&lt;/h2>
&lt;p>Java 17 brings many benefits (e.g. improved GC) from both a platform and language perspective so it felt right to invest more time trying to understand what was actually happening.&lt;/p>
&lt;p>This mainly took the form lot&amp;rsquo;s of trial and error such as experimenting with different JVM options and swapping out the JDK for different distributions to help narrow down the problem.&lt;/p>
&lt;p>The most significant learning that came from this was that we didn&amp;rsquo;t see the leak using GraalVM whereas all other HotSpot based distributions did produce the leak.
Still though, this didn&amp;rsquo;t narrow the problem space down enough to really give us any actionable information.&lt;/p>
&lt;p>Something that helped with the experimentation is that Auto Trader has invested heavily in creating a delivery platform that supports an efficient and safe CI/CD process.
Changes at both the application and base image level could be made, rolled out and verified within a short space of time.&lt;/p>
&lt;p>However, the fact that the visibility of the leak was slow to manifest meant that overall this was still a pretty painful feedback loop!&lt;/p>
&lt;h2 id="progress">Progress&lt;/h2>
&lt;p>Having originally made little progress using Native Memory Tracking, one of our engineers decided to take another look.&lt;/p>
&lt;p>To work around the challenge of the leak being so slow to manifest and the awkwardness of using &lt;code>jcmd&lt;/code> on a live deployment they decided to externalise the Native Memory Tracking data via a set custom Prometheus metrics.
This was achieved by executing JVM diagnostic commands (the equivalent of those used with &lt;code>jcmd&lt;/code> from the command line) via Java code using the &lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.management/java/lang/management/ManagementFactory.html">ManagementFactory&lt;/a> capability.&lt;/p>
&lt;p>Here&amp;rsquo;s a snippet of the kind of thing they got working&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ManagementFactory.&lt;span style="color:#a6e22e">getPlatformMBeanServer&lt;/span>().&lt;span style="color:#a6e22e">invoke&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> ObjectName(&lt;span style="color:#e6db74">&amp;#34;com.sun.management:type=DiagnosticCommand&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;vmNativeMemory&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> Object&lt;span style="color:#f92672">[]&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;summary&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> String&lt;span style="color:#f92672">[]&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;[Ljava.lang.String;&amp;#34;&lt;/span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output from this was effectively the same as running &lt;code>jcmd ${pid} VM.native_memory summary&lt;/code> against a running process from a terminal, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ jcmd &lt;span style="color:#ae81ff">1&lt;/span> VM.native_memory summary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Native Memory Tracking:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>Omitting categories weighting less than 1KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Total: reserved&lt;span style="color:#f92672">=&lt;/span>1530885KB, committed&lt;span style="color:#f92672">=&lt;/span>1079713KB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Java Heap &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>819200KB, committed&lt;span style="color:#f92672">=&lt;/span>819200KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>819200KB, committed&lt;span style="color:#f92672">=&lt;/span>819200KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Class &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>215479KB, committed&lt;span style="color:#f92672">=&lt;/span>10679KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>classes &lt;span style="color:#75715e">#13404)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> instance classes &lt;span style="color:#75715e">#12588, array classes #816)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>2487KB &lt;span style="color:#75715e">#50156)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>212992KB, committed&lt;span style="color:#f92672">=&lt;/span>8192KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> Metadata: &lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> reserved&lt;span style="color:#f92672">=&lt;/span>65536KB, committed&lt;span style="color:#f92672">=&lt;/span>58624KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> used&lt;span style="color:#f92672">=&lt;/span>58053KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> waste&lt;span style="color:#f92672">=&lt;/span>571KB &lt;span style="color:#f92672">=&lt;/span>0.97%&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> Class space:&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> reserved&lt;span style="color:#f92672">=&lt;/span>212992KB, committed&lt;span style="color:#f92672">=&lt;/span>8192KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> used&lt;span style="color:#f92672">=&lt;/span>7337KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span> waste&lt;span style="color:#f92672">=&lt;/span>855KB &lt;span style="color:#f92672">=&lt;/span>10.44%&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Thread &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>59433KB, committed&lt;span style="color:#f92672">=&lt;/span>9281KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>thread &lt;span style="color:#75715e">#94)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>stack: reserved&lt;span style="color:#f92672">=&lt;/span>59172KB, committed&lt;span style="color:#f92672">=&lt;/span>9020KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>153KB &lt;span style="color:#75715e">#562)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>arena&lt;span style="color:#f92672">=&lt;/span>108KB &lt;span style="color:#75715e">#185)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Code &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>252117KB, committed&lt;span style="color:#f92672">=&lt;/span>62997KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>4429KB &lt;span style="color:#75715e">#18870)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>247688KB, committed&lt;span style="color:#f92672">=&lt;/span>58568KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- GC &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>79110KB, committed&lt;span style="color:#f92672">=&lt;/span>79110KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>15834KB &lt;span style="color:#75715e">#27193)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>63276KB, committed&lt;span style="color:#f92672">=&lt;/span>63276KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Compiler &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>986KB, committed&lt;span style="color:#f92672">=&lt;/span>986KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>822KB &lt;span style="color:#75715e">#1325)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>arena&lt;span style="color:#f92672">=&lt;/span>165KB &lt;span style="color:#75715e">#5)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Internal &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>895KB, committed&lt;span style="color:#f92672">=&lt;/span>895KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>891KB &lt;span style="color:#75715e">#25578)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>4KB, committed&lt;span style="color:#f92672">=&lt;/span>4KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Other &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>2395KB, committed&lt;span style="color:#f92672">=&lt;/span>2395KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>2395KB &lt;span style="color:#75715e">#59)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Symbol &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>11408KB, committed&lt;span style="color:#f92672">=&lt;/span>11408KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>9898KB &lt;span style="color:#75715e">#282713)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>arena&lt;span style="color:#f92672">=&lt;/span>1511KB &lt;span style="color:#75715e">#1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Native Memory Tracking &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>7043KB, committed&lt;span style="color:#f92672">=&lt;/span>7043KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>21KB &lt;span style="color:#75715e">#315)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>tracking overhead&lt;span style="color:#f92672">=&lt;/span>7022KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Shared class space &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>12288KB, committed&lt;span style="color:#f92672">=&lt;/span>12100KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>12288KB, committed&lt;span style="color:#f92672">=&lt;/span>12100KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Arena Chunk &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>178KB, committed&lt;span style="color:#f92672">=&lt;/span>178KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>178KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Tracing &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>32KB, committed&lt;span style="color:#f92672">=&lt;/span>32KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>arena&lt;span style="color:#f92672">=&lt;/span>32KB &lt;span style="color:#75715e">#1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Logging &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>8KB, committed&lt;span style="color:#f92672">=&lt;/span>8KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>8KB &lt;span style="color:#75715e">#294)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Arguments &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>2KB, committed&lt;span style="color:#f92672">=&lt;/span>2KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>2KB &lt;span style="color:#75715e">#87)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Module &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>1698KB, committed&lt;span style="color:#f92672">=&lt;/span>1698KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>1698KB &lt;span style="color:#75715e">#6218)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Safepoint &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>8KB, committed&lt;span style="color:#f92672">=&lt;/span>8KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>8KB, committed&lt;span style="color:#f92672">=&lt;/span>8KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Synchronization &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>216KB, committed&lt;span style="color:#f92672">=&lt;/span>216KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>216KB &lt;span style="color:#75715e">#2247)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Serviceability &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>1KB, committed&lt;span style="color:#f92672">=&lt;/span>1KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>1KB &lt;span style="color:#75715e">#18)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Metaspace &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>66258KB, committed&lt;span style="color:#f92672">=&lt;/span>59346KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>722KB &lt;span style="color:#75715e">#879)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>65536KB, committed&lt;span style="color:#f92672">=&lt;/span>58624KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- String Deduplication &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>2097KB, committed&lt;span style="color:#f92672">=&lt;/span>2097KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>malloc&lt;span style="color:#f92672">=&lt;/span>2097KB &lt;span style="color:#75715e">#32625)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Unknown &lt;span style="color:#f92672">(&lt;/span>reserved&lt;span style="color:#f92672">=&lt;/span>32KB, committed&lt;span style="color:#f92672">=&lt;/span>32KB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>mmap: reserved&lt;span style="color:#f92672">=&lt;/span>32KB, committed&lt;span style="color:#f92672">=&lt;/span>32KB&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The output was then parsed and transformed into the correct metric format for Prometheus and exposed via a metrics endpoint on the service.&lt;/p>
&lt;p>&lt;em>In the past I&amp;rsquo;ve wondered why Native Memory Tracking data are not exposed via JMX beans similarly to how heap/non-heap memory usage is, this issue made me consider this again so I reached out to &lt;a href="https://twitter.com/shipilev">Aleksey Shipilëv&lt;/a> to see if he knew.
He didn&amp;rsquo;t but suggested maybe it just hadn&amp;rsquo;t been worked on yet.
I did a bit of digging and found &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8182634">this issue&lt;/a> in the OpenJDK bug tracker which suggest that is the case.&lt;/em>&lt;/p>
&lt;p>This approach allowed us to visualise the Native Memory Tracking data and importantly leave it running long enough to see if any specific memory areas were growing disproportionately compared to others.&lt;/p>
&lt;p>The memory area that stood out was &lt;code>String Deduplication&lt;/code>.&lt;/p>
&lt;p>To validate whether this was the cause they explicitly disabled String Deduplication (&lt;code>-XX:-UseStringDeduplication&lt;/code>) for the service and observed again.&lt;/p>
&lt;p>No leak!&lt;/p>
&lt;p>This gave us some additional information so I jumped back on Twitter to call for help again&amp;hellip;&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">One of our devs worked out that the memory issue with Java 17 goes away when you disable String Deduplication. &lt;br>&lt;br>So something changed between Java 11 -&amp;gt; 17 that means with -XX:+UseStringDeduplication we see a slow off-heap memory leak &lt;a href="https://t.co/QWwNRy2rZr">https://t.co/QWwNRy2rZr&lt;/a>&lt;/p>&amp;mdash; Nick Ebbitt (@nickebbitt) &lt;a href="https://twitter.com/nickebbitt/status/1465617649547849733?ref_src=twsrc%5Etfw">November 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="the-bug--the-fix">The bug &amp;amp; the fix&lt;/h2>
&lt;p>Within 15 minutes of posting the tweet a member of the Java community spotted it and tagged &lt;a href="https://twitter.com/shipilev">Aleksey Shipilëv&lt;/a> who works for Red Hat and is a subject matter expert when it comes to GC on the JVM.&lt;/p>
&lt;p>Within a few hours they had &lt;a href="https://bugs.openjdk.java.net/browse/JDK-8277981">reproduced it and filed a bug report&lt;/a>, as well &lt;a href="https://github.com/openjdk/jdk/pull/6613">submitted a PR to the Open JDK project&lt;/a> with the fix.
It turns out it was a simple maths problem.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Ha-ha, math problem, whoops. &lt;a href="https://t.co/lKM04DKs77">https://t.co/lKM04DKs77&lt;/a>&lt;/p>&amp;mdash; Aleksey Shipilëv (@shipilev) &lt;a href="https://twitter.com/shipilev/status/1465659474773950467?ref_src=twsrc%5Etfw">November 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>This was awesome!&lt;/p>
&lt;h2 id="verification">Verification&lt;/h2>
&lt;p>We were eager to get our hands on the fix however it wouldn&amp;rsquo;t be available in an official release of the JDK until the next patch version, &lt;code>17.0.2&lt;/code>, which wasn&amp;rsquo;t due until the middle of January.&lt;/p>
&lt;p>We decided to verify the fix by creating a Java base Docker image using the nightly builds produced via the &lt;code>openjdk17u&lt;/code> branch available via Adoptium&amp;rsquo;s &lt;a href="https://github.com/adoptium/temurin17-binaries/releases/tag/jdk-17%2B35">temurin17-binaries&lt;/a> GitHub repo.&lt;/p>
&lt;p>This gave us a way to deploy a version of Java 17 with the fix and provide feedback/confidence that it had in fact resolved the issues we&amp;rsquo;d seen with &lt;code>String Deduplication&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Note: I wouldn&amp;rsquo;t recommend running these nightly builds in production as they haven&amp;rsquo;t gone through the same rigourous testing &amp;amp; quality checks that an official release build will have.&lt;/p>
&lt;/blockquote>
&lt;p>This indeed did verify that we were no longer seeing the memory leak.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Deployed a nightly containing the fix for one of the affected workloads, not that there was any doubt but it&amp;#39;s looking good 😀&lt;br>&lt;br>You can see multiple 17.0.1 deployments with StringDeduplication on/off, the final one with -XX:+UseStringDeduplication and the fix&lt;br>&lt;br>Thanks &lt;a href="https://twitter.com/shipilev?ref_src=twsrc%5Etfw">@shipilev&lt;/a> 👏 &lt;a href="https://t.co/GdrhCSv5GM">pic.twitter.com/GdrhCSv5GM&lt;/a>&lt;/p>&amp;mdash; Nick Ebbitt (@nickebbitt) &lt;a href="https://twitter.com/nickebbitt/status/1468157655365607425?ref_src=twsrc%5Etfw">December 7, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="the-future">The future&lt;/h2>
&lt;p>At the time of writing this Java 17.0.2 is due to be released as part of the scheduled quarterly updates.&lt;/p>
&lt;p>Once available our process for producing the Java 17 base Docker image will pick up the new version and our consumer applications will start to use it.&lt;/p>
&lt;p>We&amp;rsquo;ll also then consider re-enabling &lt;code>String Deduplication&lt;/code> with renewed confidence in Java 17.&lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&amp;hellip;&lt;/h2>
&lt;p>I hope you enjoyed this little story.&lt;/p>
&lt;p>I shared it because, for me, it demonstrates one of the power of the Java community, as well as a good side of social media.&lt;/p>
&lt;p>Sometimes it takes the actions of one person to choose to engage and connect other people to trigger a series of events that result in a better environment for all.&lt;/p>
&lt;p>In this case it was the connection from me to &lt;a href="https://twitter.com/shipilev">Aleksey Shipilëv&lt;/a> by &lt;a href="https://twitter.com/willemsst">Steven Willems&lt;/a> that made all the difference.&lt;/p>
&lt;p>That one connection has resulted in a native memory leak in Java 17 being fixed, improving the future operability of the JVM platform for millions of developers and organisations worldwide.&lt;/p></content></item><item><title>Grow yourself through communities</title><link>https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/</guid><description>I recently spoke at Devoxx UK about how you can grow, both personally and professionally, through being involved in communities. It was in the form of an Ignite talk which was great fun but I realised that there were a few slides that felt a little lightweight compared to others.
Writing the talk up as a blog post will hopefully help me to fill out the lighter parts, as well as maybe make it suitable for a longer length talk at some point in the future.</description><content>&lt;p>I recently spoke at &lt;a href="https://www.devoxx.co.uk/speaker-details/?id=9452">Devoxx UK&lt;/a> about how you can grow, both personally and professionally, through being involved in communities.
It was in the form of an &lt;a href="https://en.wikipedia.org/wiki/Ignite_(event)">Ignite talk&lt;/a> which was great fun but I realised that there were a few slides that felt a little lightweight compared to others.&lt;/p>
&lt;p>Writing the talk up as a blog post will hopefully help me to fill out the lighter parts, as well as maybe make it suitable for a longer length talk at some point in the future.&lt;/p>
&lt;p>It may even prove useful for those out there who weren&amp;rsquo;t able to see the talk or prefer the written form.&lt;/p>
&lt;hr>
&lt;p>&lt;img alt="what" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/what.png">&lt;/p>
&lt;p>There are a few definitions of what a community is but for the purposes of this talk the one that resonates with me most is this&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>the condition of sharing or having certain attitudes and interests in common.&lt;/p>
&lt;/blockquote>
&lt;p>The word community has evolved from the word common and this is key.&lt;/p>
&lt;p>The idea of a community is that the people involved in it have something in common, whether that&amp;rsquo;s beliefs, ideas, attitudes or interests.&lt;/p>
&lt;p>&lt;img alt="why" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/why.png">&lt;/p>
&lt;p>Communities are important to us as people as they give us a sense of belonging.&lt;/p>
&lt;p>Finding other people with things in common to us is part of human nature.&lt;/p>
&lt;p>Communities help us to meet and connect with others who share our interests and provide a safe space for us to grow.&lt;/p>
&lt;p>There are many different kinds of communities exist so here are a few that relate most closely to my experiences working in tech.&lt;/p>
&lt;p>&lt;img alt="family" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/family.png">&lt;/p>
&lt;p>For me, the most important community is the one at home.&lt;/p>
&lt;p>My family are the foundations of what make it possible for me to be a success in both my personal life and at work.
They provide support and a basic sense of security that give me the space to grow and succeed.&lt;/p>
&lt;p>When you do fail, which will happen from time to time, I can always rely on them to pick me up and give me the motivation to go again.&lt;/p>
&lt;p>&lt;img alt="team" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/team.png">&lt;/p>
&lt;p>In a professional context, the first community that comes to mind is your team.&lt;/p>
&lt;p>These are the people who you work with day-to-day and share the same business priorities with.
You&amp;rsquo;ll often have aligned ideas and principles about how you believe work should be done.&lt;/p>
&lt;p>You will also disagree on things and that&amp;rsquo;s ok.&lt;/p>
&lt;p>You&amp;rsquo;ll collaborate with your team in various ways through things like coaching and pairing, or even socialising outside of work.&lt;/p>
&lt;p>&lt;img alt="organisation" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/organisation.png">&lt;/p>
&lt;p>If you look wider than your immediate team within your organisation there are usually multiple communities that are active at any one time.&lt;/p>
&lt;p>Some examples are guilds focused on things like sustainability and LGBT+.&lt;/p>
&lt;p>Other examples are groups focused on personal development &amp;amp; knowledge sharing such as an early careers network or a tech talk community.&lt;/p>
&lt;p>&lt;img alt="local-tech" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/local-tech.png">&lt;/p>
&lt;p>Outside of the place where you work your next step may be to look at the local tech community.&lt;/p>
&lt;p>These are often focused on a specific technology, some key examples for me being &lt;a href="https://dev.java/community/jugs/">Java User Groups (JUGs)&lt;/a> such as the &lt;a href="https://www.meetup.com/ManchesterUK-Java-Community/">Manchester Java Community&lt;/a> and the &lt;a href="https://londonjavacommunity.co.uk/">London Java Community&lt;/a>.&lt;/p>
&lt;p>Some other key communities that I&amp;rsquo;ve found hugely beneficial are those that focus around how we deliver software such as &lt;a href="https://twitter.com/xpmanchester">XP Manchester&lt;/a>.&lt;/p>
&lt;p>&lt;img alt="wider-tech" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/wider-tech.png">&lt;/p>
&lt;p>Taking this a step wider we can start to look at the wider tech community.&lt;/p>
&lt;p>This could be based around an open source project.
An example I&amp;rsquo;ve become involved in over the last few years is the &lt;a href="https://adoptium.net/">Adoptium&lt;/a> project that provides Java binaries to millions of developers and organisations worldwide.&lt;/p>
&lt;p>Then there are conferences such as &lt;a href="https://www.devoxx.co.uk/">Devoxx UK&lt;/a> who provide an excellent community focused Java conference.&lt;/p>
&lt;p>Finally, if you&amp;rsquo;ve never experienced one, I highly recommend seeking out and attending an unconference.
The best example I&amp;rsquo;ve found is &lt;a href="https://www.jcrete.org/">JCrete®&lt;/a> where a selection of the most respected experts in the Java field gather once a year to discuss Java and enjoy the Cretan climate and culture.&lt;/p>
&lt;p>Some other unconferences of note, which are possibly more accessible to those based in the UK, are &lt;a href="https://jalba.scot/">JAlba&lt;/a> in Edinburgh and our very own &lt;a href="https://manchesterjavacommunity.org/jmanc/">JManc&lt;/a> (that will hopefully making a reappearance in 2022).&lt;/p>
&lt;p>&lt;img alt="attend" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/attend.png">&lt;/p>
&lt;p>Where to start though?&lt;/p>
&lt;p>For me, just turning up and getting a feel for the community is the best starting place.&lt;/p>
&lt;p>First and foremost you&amp;rsquo;ll get the most out of any community you decide to be involved with if you feel welcome and included.&lt;/p>
&lt;p>&lt;img alt="grow1" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow1.png">&lt;/p>
&lt;p>This will help you grow.&lt;/p>
&lt;p>If the community is the right fit for you, you&amp;rsquo;ll start to grow a sense of belonging.&lt;/p>
&lt;p>If not, you&amp;rsquo;ll have grown your understanding of what it is your are looking for.&lt;/p>
&lt;p>You&amp;rsquo;ll also grow your experiences, some of which may just be related to stepping outside of your comfort zone.&lt;/p>
&lt;p>&lt;img alt="receive" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/receive.png">&lt;/p>
&lt;p>When you know the community feels right you can start to focus your attention on actively seeking out the content and interactions that are most relevant to you.&lt;/p>
&lt;p>You&amp;rsquo;ll start to be more selective of attending the specific events that interest you and become more aware of people in the community that are of interest.&lt;/p>
&lt;p>&lt;img alt="grow2" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow2.png">&lt;/p>
&lt;p>This will help you to grow some more.&lt;/p>
&lt;p>Adopting a more intentional approach to being involved in the community will help you to receive the information you find most relevant and make valuable connections.&lt;/p>
&lt;p>&lt;img alt="give" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/give.png">&lt;/p>
&lt;p>As you become more comfortable within a community you&amp;rsquo;ll gain the confidence to give back.&lt;/p>
&lt;p>Giving back to a community comes in various forms.&lt;/p>
&lt;p>You may simply informally share your knowledge or experience with others in the community.
It may be that you decide to give a talk.
You may offer your ideas and/or time to help the organisers with the event.&lt;/p>
&lt;p>In my opinion all good communities should be open to this kind of involvement and encourage it.
It&amp;rsquo;s the responsibility of organisers to remove barriers and try to make community involvement accessible to all.&lt;/p>
&lt;p>&lt;img alt="grow3" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow3.png">&lt;/p>
&lt;p>And you will grow some more.&lt;/p>
&lt;p>You&amp;rsquo;ll gain confidence in yourself as well as the respect of others in the community.&lt;/p>
&lt;p>You&amp;rsquo;ll also gain a sense of achievement when you see your contributions helping the community itself to grow.&lt;/p>
&lt;p>&lt;img alt="pay-it-forward" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/pay-it-forward.png">&lt;/p>
&lt;p>Finally, the most important one for me, you should pay it forward.&lt;/p>
&lt;p>Hopefully when you joined the community you had others who welcomed you and gave their time to provide a positive experience.&lt;/p>
&lt;p>Now it&amp;rsquo;s your turn!&lt;/p>
&lt;p>Engage with newcomers to the community in a way that makes them feel welcome and that they belong.&lt;/p>
&lt;p>Help existing members of the community to follow in your footsteps, whether that&amp;rsquo;s through engaging conversations or creating opportunities for them to help out or give a talk themselves.&lt;/p>
&lt;p>&lt;img alt="grow4" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow4.png">&lt;/p>
&lt;p>I&amp;rsquo;ve found that nice side effect of helping others to grow is that you will also.&lt;/p>
&lt;p>You&amp;rsquo;ll also gain the trust and respect of others in the community. This will generally lead to new opportunities both within and outside of the community you are involved with.&lt;/p>
&lt;p>&lt;img alt="join-communities" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/join-communities.png">&lt;/p>
&lt;p>So in summary, my recommendation is to get out there and join communities.&lt;/p>
&lt;p>Take your time to find communities that align with your interests and importantly are inclusive, have good values and make you feel welcome.&lt;/p>
&lt;p>&lt;img alt="grow-communities" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow-communities.png">&lt;/p>
&lt;p>Look for opportunities to grow the communities you are a part of, whether that&amp;rsquo;s through spreading the word, volunteering your time or even doing a talk of some kind.&lt;/p>
&lt;p>Most communities welcome and encourage involvement in various ways, sometimes you just need to ask the question &amp;ldquo;How can I help?&amp;rdquo; to get started.&lt;/p>
&lt;p>&lt;img alt="grow-others" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow-others.png">&lt;/p>
&lt;p>Just being involved in a community as a consumer and maybe a producer will give you lots of opportunity for growth.&lt;/p>
&lt;p>I truly believe though that if you put focus on growing others it&amp;rsquo;s at this point you will grow yourself to another level.&lt;/p>
&lt;p>&lt;img alt="grow-yourself" src="https://www.nickebbitt.com/blog/2021/12/04/grow-yourself-through-communities/grow-yourself.png">&lt;/p>
&lt;p>So to summarise, through being involed with communities of different kinds and at different levels of engagement you will grow yourself both personally and professionally in a variety of ways.&lt;/p></content></item><item><title>Debugging a Jaeger memory issue</title><link>https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/</guid><description>At Auto Trader UK we use Jaeger as the distributed tracing component within our Istio based service mesh to collect &amp;amp; visualise HTTP request traces for the services we run on our Delivery Platform (using GKE).
We have around 400 services running in production and distributed tracing provides a lot of value for us when debugging problems and understanding behaviour across the system.
At a high level, Jaeger consists of the following components:</description><content>&lt;p>At &lt;a href="https://careers.autotrader.co.uk/">Auto Trader UK&lt;/a> we use &lt;a href="https://www.jaegertracing.io/">Jaeger&lt;/a> as the distributed tracing component within our &lt;a href="https://istio.io/latest/docs/concepts/what-is-istio/">Istio&lt;/a> based service mesh to collect &amp;amp; visualise HTTP request traces for the services we run on our Delivery Platform (using &lt;a href="https://cloud.google.com/kubernetes-engine">GKE&lt;/a>).&lt;/p>
&lt;p>We have around 400 services running in production and &lt;a href="https://microservices.io/patterns/observability/distributed-tracing.html">distributed tracing&lt;/a> provides a lot of value for us when debugging problems and understanding behaviour across the system.&lt;/p>
&lt;p>At a high level, Jaeger consists of the following components:&lt;/p>
&lt;ul>
&lt;li>&lt;code>agent&lt;/code> - listens for spans sent over UDP, batches them and sends to the &lt;code>collector&lt;/code>&lt;/li>
&lt;li>&lt;code>collector&lt;/code> - receives traces from &lt;code>agents&lt;/code> and runs them through a processing pipeline. Ultimately the &lt;code>collector&lt;/code> is responsible for storing traces in some form of backend &lt;code>storage&lt;/code>.&lt;/li>
&lt;li>&lt;code>query&lt;/code> - retrieves traces from storage to display in the frontend/UI&lt;/li>
&lt;li>&lt;code>frontend&lt;/code> (UI) - used to query and visualise traces for end users&lt;/li>
&lt;li>&lt;code>storage&lt;/code> - pluggable storage component in which the &lt;code>collector&lt;/code> will persist spans, in our case &lt;a href="https://www.elastic.co/elasticsearch/">Elasticsearch&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The following diagram illustrates the flow of trace spans through Jaeger.&lt;/p>
&lt;p>&lt;img alt="Jaeger Architecture" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-architecture.png">&lt;/p>
&lt;p>The &lt;a href="https://www.jaegertracing.io/docs/1.21/architecture/">Jaeger docs&lt;/a> provide more detail of its architecture.&lt;/p>
&lt;p>As mentioned previously, we operate Istio on the cluster and this is the source of request traces on the platform.
Every HTTP request to a service running on the cluster is ingressed via an &lt;a href="https://github.com/kubernetes/ingress-nginx">ingress-nginx&lt;/a> edge proxy at which point a trace for that request begins.
A trace span is generated for every connection between the Istio side-car proxies (i.e. &lt;a href="https://istio.io/latest/docs/ops/deployment/architecture/#envoy">Envoy proxies&lt;/a>) deployed alongside every pod (i.e. replica/instance) for a service.
The proxies transparently intercept, augment and route HTTP based traffic between services across the cluster.&lt;/p>
&lt;p>Istio offers much more than just this but for the purposes of this post we are only interested in tracing.&lt;/p>
&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>With this context let&amp;rsquo;s describe the problem we experienced with the &lt;code>collector&lt;/code>.&lt;/p>
&lt;p>We were alerted (via a Prometheus alert rule) to the fact that the container for the &lt;code>collector&lt;/code> had crashed and been restarted.&lt;/p>
&lt;p>With some basic debugging, using &lt;code>kubectl get pods --watch&lt;/code>, we were able to observe the pod&amp;rsquo;s state changes which highlighted that it had been &lt;code>OOMKilled&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jaeger-collector-6fdf6bf6bb-qp84z 1/1 Running &lt;span style="color:#ae81ff">5&lt;/span> 109m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jaeger-collector-6fdf6bf6bb-qp84z 0/1 OOMKilled &lt;span style="color:#ae81ff">5&lt;/span> 111m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jaeger-collector-6fdf6bf6bb-qp84z 0/1 CrashLoopBackOff &lt;span style="color:#ae81ff">5&lt;/span> 111m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>OOMKilled is a pod state that indicates that the Linux out-of-memory (OOM) killer has terminated a container process in the pod. This happens when a pod consumes more memory than its limit.&lt;/p>
&lt;p>You can find a detailed explanation of how resources are managed on Kubernetes in the &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits">docs&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>This was confirmed further using a simple Prometheus query based on the &lt;code>kube_pod_container_status_terminated_reason&lt;/code> metric.&lt;/p>
&lt;p>&lt;img alt="Jaeger Prometheus OOMKilled" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-prometheus-oomkilled.png">&lt;/p>
&lt;p>Around the same time we&amp;rsquo;d been performing some Elasticsearch (Jaeger&amp;rsquo;s &lt;code>storage&lt;/code> backend) upgrades and this gave us a correrlation point that warranted further investigation.
We discovered that during an Elasticsearch upgrade we were experiencing some unplanned downtime.
The unavailability of Elasticsearch meant that the &lt;code>collector&lt;/code> was unable to send its trace events to the storgae backend.&lt;/p>
&lt;p>In theory, this shouldn&amp;rsquo;t be a problem for the &lt;code>collector&lt;/code>.&lt;/p>
&lt;p>Under normal conditions we expect the &lt;code>collector&lt;/code>&amp;rsquo;s queue to be near empty at all times.
This shows us that we are able to store trace spans at a fast enough rate to keep up with the volume of spans being generated across the system.&lt;/p>
&lt;p>&lt;img alt="Jaeger Collector Healthy" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-collector-healthy.png">&lt;/p>
&lt;p>The &lt;code>collector&lt;/code> is designed to handle the unavailability of the storage backend using an internal bounded queue that buffers trace spans when it is unable to store them.
If the queue fills up then the &lt;code>collector&lt;/code> will drop the oldest trace spans and should continue working in this way until it is able to store spans again.&lt;/p>
&lt;p>&lt;img alt="Jaeger Collector Full" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-collector-full.png">&lt;/p>
&lt;p>The following configuration options can be used to control the size of the &lt;code>collector&lt;/code>&amp;rsquo;s queue:&lt;/p>
&lt;ul>
&lt;li>&lt;code>collector.queue-size&lt;/code>
&lt;ul>
&lt;li>limits the queue size by an absolute maximum number&lt;/li>
&lt;li>e.g. 50,000 spans&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>collector.queue-size-memory&lt;/code>
&lt;ul>
&lt;li>limits the queue size based on a calculation involving an amount of memory and the average span size, calculated at runtime&lt;/li>
&lt;li>e.g. 80 megabytes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In principal, the &lt;code>collector.queue-size-memory&lt;/code> option sounds great and we decided to go with it as it allowed us to control the resources that instances of the &lt;code>collector&lt;/code> would use regardless of the size and volume of trace spans.&lt;/p>
&lt;p>So when we understood that the &lt;code>collector&lt;/code> container restarts correlated with their queue filling up due to the unavailability of the storage backend, it challenged our expectations of how the &lt;code>collector&lt;/code> should behave in this scenario.
The actual memory usage did not appear to align with how we had configured the Jaeger &lt;code>collector&lt;/code>, which was to have a maximum queue size of &lt;code>80mb&lt;/code> and an overall memory request for the container of &lt;code>200mb&lt;/code>.&lt;/p>
&lt;p>With our set up, the &lt;code>collector&lt;/code> utilises around 10% of the available 200mb request when it is managing its queue effectively.&lt;/p>
&lt;p>&lt;img alt="Normal Memory" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-collector-memory-prod.png">&lt;/p>
&lt;p>We expected that when the &lt;code>collector&lt;/code> queue filled up then memory usage would be constrained to the value we configure it for, and for trace spans to be dropped when the queue was full.
What actually happened was that before we were able to observe trace spans being dropped to a full queue the OOM killer had already done its job.&lt;/p>
&lt;p>In theory, the max queue size setting of &lt;code>80mb&lt;/code> should constrain the queue and the amount of memory it consumed.
This, combined with the overall memory request of &lt;code>200mb&lt;/code>, should provide ample space for the the collector to be resilient to any scenario that could cause the queue to fill up with memory to spare for the general overheads of the &lt;code>collector&lt;/code> process.&lt;/p>
&lt;h2 id="investigation--understanding">Investigation &amp;amp; understanding&lt;/h2>
&lt;p>A good first step when investigating an issue is to try to recreate it.
This can often be easier said than done.&lt;/p>
&lt;p>The reality is that it took several attempts (seperated by a number of nights sleep) to fully understand what was actually happening when the &lt;code>collector&lt;/code> was unable to store trace spans due to Elasticsearch being unavailable.&lt;/p>
&lt;p>At Auto Trader we deploy the Delivery Platform to a &lt;code>testing&lt;/code> cluster on GKE which is an exact replica of &lt;code>production&lt;/code> from a platform perspective. The only real differences are the scale (e.g. the resources we make available to the cluster) and the product related workloads that are deployed; the infrastructure and platform services are equivalent.&lt;/p>
&lt;p>We also deploy some test services to all environments that serve the purpose of continually verifying that our Istio deployment is behaving as expected by simulating the behaviours we depend on, for example, distributed tracing via Jaeger.&lt;/p>
&lt;p>This made it relatively straighforward to simulate the issue in a non-production environment as Jaeger was already deployed along with the test services.&lt;/p>
&lt;p>All I needed to do was generate some load that would produce a reasonable volume of trace spans across the system and then break connectivity with Elasticsearch to cause the &lt;code>collector&lt;/code> queue to fill up.&lt;/p>
&lt;p>I used &lt;a href="https://jmeter.apache.org/">Apache JMeter&lt;/a> to generate the load and configured it to send HTTP requests to the Istio test service at a rate of ~150 requests per second. This translates into approximately 1,300 ops per seconds (i.e. trace spans) being ingested by Jaeger.&lt;/p>
&lt;p>&lt;img alt="Jaeger Ops" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-ops.png">&lt;/p>
&lt;h3 id="key-metrics">Key metrics&lt;/h3>
&lt;p>The total volume of trace spans is small compared to normal production volumes which peak at around 45,000 ops/s.
In testing we run significantly fewer replicas though so this allowed me to simulate it in relative terms.&lt;/p>
&lt;p>With the test load the &lt;code>collector&lt;/code> queue length remains at around zero as expected i.e. as trace spans are ingested they are processed and stored in the Elasticsearch backend at the same rate.&lt;/p>
&lt;p>&lt;img alt="Jaeger Normal Queue Length" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-normal-queue-length.png">&lt;/p>
&lt;p>We can also observe that we are not be dropping or rejecting any spans.&lt;/p>
&lt;p>&lt;img alt="Jaeger Normal Span Drop" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-normal-span-drop.png">&lt;/p>
&lt;p>However, if we break connectivity to the Elasticsearch (the storage backend) then the queue starts to fill but before we are able to observe spans being dropped the &lt;code>collector&lt;/code> container is restarted by the OOM killer.&lt;/p>
&lt;p>&lt;img alt="Jaeger Grafana Memory OOMKilled" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-grafana-memory-oomkilled.png">&lt;/p>
&lt;p>&lt;em>NOTE: from 09:41 to 09:46 it appears that the memory has stabilised at around 150m. This in fact just smoothing of the visualisation in Grafana due to the absence of metric data points for the period that the jaeger container was in a crash state when Prometheus was unable to perform its scrape&lt;/em>&lt;/p>
&lt;p>At this point the evidence was pointing towards items on the &lt;code>collector&lt;/code> queue consuming more memory than the suggested maximum limit specified in the configuration.&lt;/p>
&lt;p>Having successfully recreated the issue in a controlled environment this allowed me to experiment with potential solutions.&lt;/p>
&lt;h3 id="solution">Solution&lt;/h3>
&lt;p>With a better understanding that the memory used by the &lt;code>collector&lt;/code>&amp;rsquo;s internal queue was not being limited as we expected it allowed me to experiment with the &lt;code>collector&lt;/code> configuration to find the settings that would allow us to run the process in a predictable &amp;amp; resilient way.&lt;/p>
&lt;p>The first idea I had in mind was to vertically scale the memory available to the &lt;code>collector&lt;/code> process to understand the total memory required to run the process with our current max queue setting of &lt;code>80mb&lt;/code>.&lt;/p>
&lt;p>Following a few iterations of increasing the memory request for the &lt;code>collector&lt;/code> pod I found that a full queue actually requires &lt;code>~750mb&lt;/code> memory.&lt;/p>
&lt;p>It should be noted that the queue size will depend on the nature of the trace spans that are collected across your services. Currently all our trace spans come from Istio and they are therefore fairly consistent is size and structure.&lt;/p>
&lt;p>Rather than scale up each replica we decided to adjust the max queue setting to a size that fits within our existing memory request of &lt;code>200mb&lt;/code>. The sweet spot for this was a max queue size of &lt;code>15mb&lt;/code>.&lt;/p>
&lt;p>The trade-off on this decision being a cost saving on the total resources we need to run the Jaeger &lt;code>collector&lt;/code> pods against the fact that if we experience any issues causing the queue to fill up then we&amp;rsquo;ll start dropping trace spans much sooner.&lt;/p>
&lt;p>Now when connectivity to the backend is broken we can see the &lt;code>collector&lt;/code>&amp;rsquo;s queue fill up.&lt;/p>
&lt;p>&lt;img alt="Jaeger Fixed Queue Length" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-fixed-queue-length.png">&lt;/p>
&lt;p>When it reached capacity we start to see spans being dropped, rather than the &lt;code>collector&lt;/code> being restarted by the OOM killer.&lt;/p>
&lt;p>&lt;img alt="Jaeger Fixed Span Drop" src="https://www.nickebbitt.com/blog/2021/04/29/debugging-a-jaeger-memory-issue/jaeger-fixed-span-drop.png">&lt;/p>
&lt;p>Lovely :)&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up&lt;/h2>
&lt;p>Following this investigation we raised &lt;a href="https://github.com/jaegertracing/jaeger/issues/2715">an issue&lt;/a> with the Jaeger project to share our findings which they will hopefully look to investigate further and resolve.&lt;/p>
&lt;p>Previous to this issue I was fairly new to Jaeger, safe to say I&amp;rsquo;ve become much more intimate with how it&amp;rsquo;s architected and some its inner workings. Often it takes a real problem for you to really grasp how a technology works.&lt;/p>
&lt;p>Going forward we are now in a better position to ensure our Jaeger deployment is resilient to failure and, when the times comes, scale it to handle a larger volume of traces across the system.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>Distributed tracing - &lt;a href="https://microservices.io/patterns/observability/distributed-tracing.html">https://microservices.io/patterns/observability/distributed-tracing.html&lt;/a>&lt;/li>
&lt;li>Jaeger architecture - &lt;a href="https://www.jaegertracing.io/docs/1.21/architecture/">https://www.jaegertracing.io/docs/1.21/architecture/&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Discovering Test Doubles</title><link>https://www.nickebbitt.com/blog/2019/10/11/discovering-test-doubles/</link><pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2019/10/11/discovering-test-doubles/</guid><description>I wrote most of the content for this post well over a year ago whilst working for Auto Trader. When I joined the company I landed in a team that was pretty unique compared to any I&amp;rsquo;d worked in before. The focus on quality and technical excellence was very high, there was a real focus on collaboration and I really started to get a feel for what it might be like in an XP team.</description><content>&lt;p>I wrote most of the content for this post well over a year ago whilst working for &lt;a href="https://careers.autotrader.co.uk/">Auto Trader&lt;/a>. When I joined the company I landed in a team that was pretty unique compared to any I&amp;rsquo;d worked in before. The focus on quality and technical excellence was very high, there was a real focus on collaboration and I really started to get a feel for what it might be like in an XP team. In the short time I was on the team I learned a lot from some very smart people.&lt;/p>
&lt;p>It&amp;rsquo;s a bit of a long read but hopefully you find it useful and interesting. If you just care about what a test double is then go straight to &lt;a href="https://www.nickebbitt.com/blog/2019/10/11/discovering-test-doubles/#vocabulary">that section&lt;/a> and skip the background info.&lt;/p>
&lt;p>I&amp;rsquo;d love to hear any thoughts or experiences people have on this topic. Also any feedback on the content would be awesome.&lt;/p>
&lt;p>I&amp;rsquo;ve got doubts about the code examples used and really struggled with the section on mocks but after lots of umming and ahing I&amp;rsquo;ve just decided to publish it as is. The way I see it is that it&amp;rsquo;s just a waste of my time if I keep it hidden away on personal computer, what&amp;rsquo;s the worst that could happen :)&lt;/p>
&lt;h1 id="some-background">Some background&lt;/h1>
&lt;p>I started working with Java and object-oriented (OO) languages full-time just over 5 years ago. I made a concious decision to explore as many &amp;ldquo;best-practice&amp;rdquo; approaches to designing and implementing OO software as I could. This involved lots of research around the various techniques involved in creating well architected, &lt;em>clean&lt;/em> software.&lt;/p>
&lt;p>What I understand by well architected, &lt;em>clean&lt;/em> software is:&lt;/p>
&lt;blockquote>
&lt;p>Software that is easy to understand (i.e. the design reveals the intent) and maintain (i.e. change).&lt;/p>
&lt;p>Robert C. Martin&lt;/p>
&lt;/blockquote>
&lt;p>This, however, is much easier said than done. After years of continuous trial and error there is still so much to learn. The number of times I look back at code I wrote 6 months ago, even 1 month ago (in fact, sometimes a few hours ago), and question my design choices is high. I think this is healthy though. We should always be challenging ourselves to become better developers.&lt;/p>
&lt;p>When I was starting out developing OO software the idea of automated testing was quite alien to me. Previous to this I worked in an environment where testing was treated as a separate phase of the development process performed by a testing team. The only testing I carried out as a dev was manual or, at best, through writing throwaway test harnesses to exercise the code I had written. Looking back this feels so wrong but at the time it was my norm, and hindsight is a wonderful thing.&lt;/p>
&lt;blockquote>
&lt;p>Testing is all about getting feedback on software.&lt;/p>
&lt;p>xUnit Test Patterns - Gerard Mezaros&lt;/p>
&lt;/blockquote>
&lt;p>Around the same time I started to develop an appreciation for delivering software in a more &lt;em>agile&lt;/em> way with the ideas behind &lt;a href="https://en.wikipedia.org/wiki/Extreme_programming">eXtreme Programming&lt;/a> resonating strongly with me. The desire for ever shorter feedback loops in the development cycle and emphasis on Test Driven Development (TDD) helped me realise that without automated tests it would be very difficult, if not impossible, to incrementally evolve a software system with any level of confidence. Following a good few years of writing automated tests and practicing continuous integration it just seems like a no-brainer.&lt;/p>
&lt;blockquote>
&lt;p>When a class does not depend on any other classes, testing it is relatively straightforward.&lt;/p>
&lt;p>xUnit Test Patterns - Gerard Mezaros&lt;/p>
&lt;/blockquote>
&lt;p>Another reality that dawned on me more recently was that the design of these tests is as important to the overall understanding and maintainability of the software as the production code. There is definitely a skill to writing good tests and, while writing tests for a simple class or function with no dependencies is relatively straightforward, as soon as we tackle a more complex body of code, with one or more dependencies, things become a bit trickier.&lt;/p>
&lt;p>To tackle this complexity it is common practice to reach for a mocking framework such as &lt;a href="http://site.mockito.org/">Mockito&lt;/a>. Mocking frameworks enable developers to &amp;ldquo;mock&amp;rdquo; dependencies in their tests with ease but this can come at a cost, and it is a cost that I have felt first hand.&lt;/p>
&lt;p>Mocking frameworks make it very convenient to &amp;ldquo;mock&amp;rdquo; dependencies in our tests and because of this I found myself mocking them without really thinking about the reasons why. The cost that materialised in my tests was that their intent became less clear making them difficult to understand what they are actually trying to achieve. I noticed that many tests would become quite complicated and the scope of the unit being tested became less clear.&lt;/p>
&lt;p>This point is also pertintent where there is a desire for tests to provide a form of documentation for a system. If the tests aren&amp;rsquo;t clear then their value significantly decreases.&lt;/p>
&lt;p>Most of the time when using a mocking framework we aren&amp;rsquo;t actually creating mocks. The term &amp;ldquo;mock&amp;rdquo; has become slang for test double so it&amp;rsquo;s very easy to gloss over the fact that we are making use of various different types of test double.&lt;/p>
&lt;p>Interestingly, the term &amp;ldquo;mock&amp;rdquo; is commonly used as a verb. We&amp;rsquo;ll say things like &amp;ldquo;we need to mock this out&amp;rdquo; or &amp;ldquo;we&amp;rsquo;re going to need to do some mocking in this test&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>When all you have is a mocking framework, everything looks like a mock!&lt;/p>
&lt;p>Me&lt;/p>
&lt;/blockquote>
&lt;p>Prior to joining Auto Trader I used Mockito extensively in my tests. It was one of first tools I picked up when I started to learn TDD and write automated tests in Java. Then, all of a sudden, I was dropped into a code base where a concious decision had been made not use a mocking framework, instead all test doubles were hand rolled. Instead of seeing &amp;ldquo;mock&amp;rdquo; everywhere, I was now seeing terms such as dummy, stub, fake, as well as mock. Now don&amp;rsquo;t get me wrong, I knew of these terms but being able to create my own dummies and stubs wasn&amp;rsquo;t something that came naturally. Through using Mockito I&amp;rsquo;d totally glossed over the details. In many ways having access to tools &amp;amp; frameworks such as Mockito is great as I felt like I became productive with automated testing fairly quickly. With hindsight it also had its problems, for example, without a second thought I would &amp;ldquo;mock&amp;rdquo; a collaborator required by my test.&lt;/p>
&lt;blockquote>
&lt;p>Easiness will eventually slow you down&lt;/p>
&lt;p>Simple Made Easy - Rich Hickey&lt;/p>
&lt;/blockquote>
&lt;p>So while mocking frameworks do make it easier to test our software I believe we also need to consider the incidental complexity that comes with them. If we don&amp;rsquo;t take care to understand the tools we are using and the implications of the choices we make, the cost could be that we make choices that seem easier at the expense of longer term complexity.&lt;/p>
&lt;p>Now we have some context let&amp;rsquo;s get to the main focus of this post which is to explore the techniques available to us for writing simple, maintainable, and therefore &lt;em>clean&lt;/em>, tests. We will focus on the trickier side of writing automated tests where we need to consider dependencies. In particular we will focus on the use of &lt;em>test doubles&lt;/em> in place of those dependencies to verify the behaviour of a system. Through this we will understand the fundamental building blocks that we can use (and mocking frameworks also use) to test code that depends on other code.&lt;/p>
&lt;p>With this knowledge we will have a better understanding of when to use a &lt;em>test double&lt;/em> and importantly which type of &lt;em>test double&lt;/em> we need, whether that is via a mocking framework or rolling our own.&lt;/p>
&lt;h1 id="vocabulary">Vocabulary&lt;/h1>
&lt;p>First, let&amp;rsquo;s define some of the concepts we&amp;rsquo;ll be exploring and the vocabulary we&amp;rsquo;ll be using. The following definitions have been collected from various leaders in this space over the past 20 years.&lt;/p>
&lt;h2 id="system-under-test">System Under Test&lt;/h2>
&lt;p>The system under test (SUT), or test subject, is&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>short for &amp;ldquo;whatever thing we are testing&amp;rdquo; and is always defined from the perspective of the test.&lt;/p>
&lt;p>&lt;a href="http://xunitpatterns.com/SUT.html">Gerard Mezaros&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="unit-test">Unit test&lt;/h2>
&lt;p>A low-level fast running test, usually written by a developer, focusing on a small part of the software system, that verifies some expectations about it.&lt;/p>
&lt;p>But, what is a unit?&lt;/p>
&lt;p>There are differing opinions of what a unit is but the one I adhere to and we&amp;rsquo;ll use for the purposes of this talk is nicely described by Martin Fowler&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>Although I start with the notion of the unit being a class, I often take a bunch of closely related classes and treat them as a single unit.&lt;/p>
&lt;p>&lt;a href="https://martinfowler.com/bliki/UnitTest.html">Martin Fowler&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="collaborator">Collaborator&lt;/h2>
&lt;p>Something that the test subject depends on, also known as a dependency. I will use these terms interchangeably.&lt;/p>
&lt;blockquote>
&lt;p>An individual class or a large-grained component on which the system under test (SUT) depends.&lt;/p>
&lt;p>&lt;a href="http://xunitpatterns.com/DOC.html">Gerard Mezaros&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="test-double">Test double&lt;/h2>
&lt;p>The term &lt;em>test double&lt;/em> is a play on the term &lt;em>stunt double&lt;/em> from the film industry. The idea being that we have body doubles that will stand in for the real actors. They will look the same and act similarly but they are not the real thing.&lt;/p>
&lt;blockquote>
&lt;p>Test Double is a generic term for any case where you replace a production object for testing purposes.&lt;/p>
&lt;p>Martin Fowler - Mocks Aren&amp;rsquo;t Stubs&lt;/p>
&lt;/blockquote>
&lt;p>There are various types of test double and we will cover in these in more detail next.&lt;/p>
&lt;h1 id="test-doubles">Test Doubles&lt;/h1>
&lt;p>Now we have a bit of background and some high-level testing vocabulary to work with, using an example we&amp;rsquo;ll explore the different types of test double.&lt;/p>
&lt;p>When reading up about this topic, I encountered a various descriptions of the different test doubles with subtle differences. As with a lot of things in tech, opinions differ. The descriptions I provide here aren&amp;rsquo;t my own, they come from leaders in the field such as &lt;a href="http://xunitpatterns.com/">Gerard Mezaros&lt;/a>, &lt;a href="https://8thlight.com/blog/uncle-bob/2014/05/14/TheLittleMocker.html">Robert Martin&lt;/a> and &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&lt;/a>&lt;/p>
&lt;p>The are five main types of test double:&lt;/p>
&lt;ul>
&lt;li>Dummy&lt;/li>
&lt;li>Stub&lt;/li>
&lt;li>Spy&lt;/li>
&lt;li>Mock&lt;/li>
&lt;li>Fake&lt;/li>
&lt;/ul>
&lt;p>The following examples test the algorithm for a notification service. Here&amp;rsquo;s the API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> User user;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationService(User user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>(Notification notification) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The job of the &lt;code>NotificationService&lt;/code> is to determine whether the notification can be published for the user. A boolean is returned that represents whether a notification has been published or not.&lt;/p>
&lt;p>While unit testing this we don&amp;rsquo;t want to send real notifications. The delivery of real notifications will be performed by an external 3rd party system (e.g. AWS SNS or GCM) and for unit testing purposes we don&amp;rsquo;t want to concern ourselves with this dependency. Amongst other things, using a real notification service introduces latency, non-determinism and of course the cost of using the service. If we are running the unit tests mutliple times a day, we want them to be quick, repeatable and we definitely don&amp;rsquo;t expect them to have a direct financial impact to the business.&lt;/p>
&lt;p>Therefore, instead of &lt;code>process&lt;/code> depending on a real implementation of a notification, it depends on the concept of a notification. This is represented by the &lt;code>Notification&lt;/code> interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Notification&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Result &lt;span style="color:#a6e22e">publish&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>publish&lt;/code> returns a &lt;code>Result&lt;/code>, which is an enum representing successful publish, or otherwise, of the notification.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> Result {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SUCCESS, FAIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this in mind, let&amp;rsquo;s now take a look at our first test double.&lt;/p>
&lt;h2 id="dummy">Dummy&lt;/h2>
&lt;p>The simplest of all test doubles is the dummy (or dummy object).&lt;/p>
&lt;blockquote>
&lt;p>Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists.&lt;/p>
&lt;p>&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Importantly, if a dummy was used in a test we would expect it to fail as this would be unexpected behaviour and we should be thinking about using another type of test double.&lt;/p>
&lt;p>In respect of our notification service example, to publish a notification, the user must be authorised. If they are not, we need to ensure that a notification has not been published. The last thing we want is any old user sending out notifications and running up a bill with our favourite cloud provider.&lt;/p>
&lt;p>In the context of our test, one way to ensure that a notification isn&amp;rsquo;t sent when a request is made by an unauthorised user is to use a dummy notification. We need to supply a notification because the API requires it however we don&amp;rsquo;t expect it to be used.&lt;/p>
&lt;p>One option here is to simply pass null instead of an object to play the role of the dummy notification.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">notification_not_processed_when_user_is_unauthorised&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(unauthorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertFalse(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#66d9ef">null&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will work as if there any interactions with the dummy (or in this case &lt;code>null&lt;/code>) notification then the test should blow up due to a &lt;code>NullPointerException&lt;/code>. This isn&amp;rsquo;t very obvious though and if a test fails because of it we&amp;rsquo;ll need to perform a few mental hops to work out what&amp;rsquo;s gone wrong. Also, I like code to be simple and express its intent.&lt;/p>
&lt;p>I want the tests to speak to me so let&amp;rsquo;s create a dummy object to serve that purpose.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DummyNotification&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Notification {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Result &lt;span style="color:#a6e22e">publish&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RuntimeException(&lt;span style="color:#e6db74">&amp;#34;This should not be called!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using an IDE (IntelliJ for me) we can quite quickly create a simple dummy implementation of the &lt;code>Notification&lt;/code> interface. The &lt;code>DummyNotification&lt;/code> will throw an exception if an attempt is made to publish it. This allows us to write a test that will fail if there are any unintended interactions with the notification whilst processing it for an unauthorised user.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">notification_not_processed_when_user_is_unauthorised&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(unauthorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertFalse(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> DummyNotification()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An alternative, if we&amp;rsquo;re using Java 8 or later, is to simply pass a lambda as the &lt;code>Notification&lt;/code> interface meets the contract for the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">&lt;code>Supplier&lt;/code>&lt;/a> functional interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">notification_not_processed_when_user_is_unauthorised&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(unauthorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Notification dummyNotification &lt;span style="color:#f92672">=&lt;/span> () &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RuntimeException(&lt;span style="color:#e6db74">&amp;#34;This should not be called&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertFalse(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(dummyNotification));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is nice as the expectations are clear in the test and we&amp;rsquo;re able to do away with the extra class we created for the dummy notification, although we&amp;rsquo;ll need to repeat this pattern wherever we want to use an equivalent double. It will depend on the context but it&amp;rsquo;s a nice option if you want to use it. If you prefer, you could inline the lamba however I think giving it a name improves the readability of the test.&lt;/p>
&lt;p>So that&amp;rsquo;s a dummy, nice and simple but not very clever. Preferably we wouldn&amp;rsquo;t want to put too much effort into creating a dummy for our tests. Also, if we are using lots of dummies there may be a problem with our design, for example the system under test having too many responsibilities.&lt;/p>
&lt;p>While dummies are relatively quick and easy, their use is limited. A dummy won&amp;rsquo;t help us to test the other scenarios that the &lt;code>NotificationService&lt;/code> must support. One way we can do this is through the use of another test double, the Stub.&lt;/p>
&lt;h2 id="stub">Stub&lt;/h2>
&lt;p>So what is a Stub? Martin Fowler&amp;rsquo;s description covers it nicely.&lt;/p>
&lt;blockquote>
&lt;p>Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what&amp;rsquo;s programmed in for the test.&lt;/p>
&lt;p>&lt;a href="https://martinfowler.com/bliki/TestDouble.html">Martin Fowler&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>You may have noticed the use of &lt;code>unauthorisedUser()&lt;/code> and &lt;code>authorisedUser()&lt;/code> in the tests so far and wondered where they had come from. They are in fact stubs that we&amp;rsquo;ve already been using on the quiet. These stubs are hard wired with the result allowing us to create types named very specifically to represent each of an authorised and unauthorised user.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UnauthorisedUserStub&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> User &lt;span style="color:#a6e22e">unauthorisedUser&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> UnauthorisedUserStub();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">authorise&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AuthorisedUserStub&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> User &lt;span style="color:#a6e22e">authorisedUser&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AuthorisedUserStub();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">authorise&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The nice thing about these stubs is that they can easily be shared across many tests, and when you see them being used their purpose is very clear.&lt;/p>
&lt;p>Alternatively, switching back to the &lt;code>Notification&lt;/code>, we may want to create a stub that&amp;rsquo;s a bit more flexible.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationStub&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Notification {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Result result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationStub(Result result) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Result &lt;span style="color:#a6e22e">publish&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we create this stub, we proivde the &lt;code>Result&lt;/code> that we want it to return. This is known as a programmable stub.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process_succeeds_when_user_is_authorised_and_notification_is_successful&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationStub successfulNotificationStub &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationStub(Result.&lt;span style="color:#a6e22e">SUCCESS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(authorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(successfulNotificationStub));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process_fails_when_user_is_authorised_but_notification_fails&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationStub failedNotificationStub &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationStub(Result.&lt;span style="color:#a6e22e">FAIL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(authorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertFalse(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(failedNotificationStub));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We now know how to provide a stub to stand in for a collaborator and ask it to supply canned answers when it&amp;rsquo;s interacted with but this doesn&amp;rsquo;t guarantee that a call was made to the collaborator. Maybe the implementation just happened to pass the test. If we want to be sure that our test subject did infact use the collaborator in its algorithm then we need the help of another test double, the spy.&lt;/p>
&lt;h2 id="spy">Spy&lt;/h2>
&lt;p>The &lt;em>spy&lt;/em> test double gives us a way to implement behaviour verification, that is, a way of verifying the iteractions of the test subject with a collaborator.&lt;/p>
&lt;p>In the reliable words of Martin Fowler&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>Spies are stubs that also record some information based on how they were called.&lt;/p>
&lt;p>&lt;a href="https://martinfowler.com/bliki/TestDouble.html">Martin Fowler&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>A spy provides a way to capture information about how the test subject interacted with it, for example, the number of invocations or even the actual arguments used in a method call.&lt;/p>
&lt;p>To create a spy we need to roll a slightly different implementation of the &lt;code>Notification&lt;/code> interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationSpy&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Notification {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Result result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> publishWasCalled &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationSpy(Result result) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Result &lt;span style="color:#a6e22e">publish&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> publishWasCalled &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">publishWasCalled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> publishWasCalled;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, as well as returning a stubbed &lt;code>Result&lt;/code>, when &lt;code>publish&lt;/code> is called we record the fact in a boolean flag. This allows us to perform a verification against the flag in our test.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process_succeeds_when_user_is_authorised_and_notification_is_successful&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationSpy successfulNotificationSpy &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationSpy(Result.&lt;span style="color:#a6e22e">SUCCESS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(authorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(successfulNotificationSpy));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(successfulNotificationSpy.&lt;span style="color:#a6e22e">sendWasCalled&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is nice, the test is now speaking to us and the intent is obvious.&lt;/p>
&lt;p>There is a flaw though in this implementation as if &lt;code>publish&lt;/code> was called multiple times we wouldn&amp;rsquo;t know. As there is a cost associated with publishing real notifications it&amp;rsquo;s definitely a behaviour with undesirable side-effects.&lt;/p>
&lt;p>A minor change to the our spy allows us to verify that &lt;code>publish&lt;/code> is called once and only once.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationSpy&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Notification {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Result result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> publishWasCalledCount &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationSpy(Result result) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Result &lt;span style="color:#a6e22e">publish&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> publishWasCalledCount&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">publishWasCalledCount&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> publishWasCalledCount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our test can then verify the number of calls made to &lt;code>publish&lt;/code> that have been recorded against the spy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process_succeeds_when_user_is_authorised_and_notification_is_successful&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationSpy successfulNotificationSpy &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationSpy(Result.&lt;span style="color:#a6e22e">SUCCESS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(authorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(successfulNotificationSpy));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(notificationSpy.&lt;span style="color:#a6e22e">sendWasCalledCount&lt;/span>(), 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the spy test double covered we&amp;rsquo;ll move swiftly on to the next, the mock.&lt;/p>
&lt;h2 id="mock">Mock&lt;/h2>
&lt;p>Until recently I would have referred to all of the above as a mock! This was ultimately the motivation for this post. I wanted to discover the real meaning behind the term mock, and more generally test doubles.&lt;/p>
&lt;p>Mocks are&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;objects pre-programmed with expectations which form a specification of the calls they are expected to receive.&lt;/p>
&lt;p>&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>In essence, this means that the mock has the knowledge of how the test subject should interact with it and is able to verify it.&lt;/p>
&lt;p>When it comes to creating our own mock object things become a bit trickier. We need to write more code in our test double meaning its complexity is going to rise and there will be a greater maintenance overhead. With this in mind, we&amp;rsquo;ll have a go anyway.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationMock&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Notification {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Result result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> actualPublishCallCount &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationMock(Result result, &lt;span style="color:#66d9ef">int&lt;/span> expectedPublishCallCount) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">expectedPublishCallCount&lt;/span> &lt;span style="color:#f92672">=&lt;/span> expectedPublishCallCount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Result &lt;span style="color:#a6e22e">publish&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actualPublishCallCount&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">verify&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(actualPublishCallCount, expectedPublishCallCount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can then construct our mock and pre-program it with the expectation of a single call being made to the &lt;code>publish&lt;/code> method.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process_succeeds_when_user_is_authorised_and_notification_is_successful&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationMock successfulNotificationMock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationMock(Result.&lt;span style="color:#a6e22e">SUCCESS&lt;/span>, 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">final&lt;/span> NotificationService testSubject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(authorisedUser());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(successfulNotificationMock));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> successfulNotificationMock.&lt;span style="color:#a6e22e">verify&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In some ways though the test has become less obvious. One way to improve this is to provide a builder for the mock so we can create it using a more fluent API e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">new&lt;/span> NotificationMockBuilder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withResult&lt;/span>(Result.&lt;span style="color:#a6e22e">SUCCESS&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withExpectedPublishCallCount&lt;/span>(1);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point though it probably makes sense to reach for a mocking framework such as &lt;a href="https://site.mockito.org/">Mockito&lt;/a>. The power of Mockito (and other mocking frameworks) removes a lot of the complexity and code we have to write and maintain ourselves.&lt;/p>
&lt;p>Of course with great power comes great responsibility but, having read this far, we&amp;rsquo;ll hopefully be more informed when reaching for the more powerful tools that are available.&lt;/p>
&lt;h2 id="fake">Fake&lt;/h2>
&lt;p>When we want to verify the behaviour of the test subject but depending on the real implementation of a collaborator is not possible or desirable, one option is to use a &lt;em>fake&lt;/em> object.&lt;/p>
&lt;blockquote>
&lt;p>Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production&lt;/p>
&lt;p>&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>A good example is where you choose to use an in-memory database instead of the real thing. This helps to remove the dependency on the real database being available as well being much more efficient. If the database is a key/value store then an even simpler Map based implementation could fit the bill and provide even greater efficiency. After all, unit tests should be fast.&lt;/p>
&lt;p>To demonstrate with a simple, possibly unlikely, example we&amp;rsquo;ll create a fake &lt;code>User&lt;/code>. The fake &lt;code>User&lt;/code> will have a working implementation of the &lt;code>authorise&lt;/code> method that will only allow notifications to be sent for users with a name starting with &lt;em>&amp;ldquo;Nick&amp;rdquo;&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FakeUser&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">FakeUser&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">authorise&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> name.&lt;span style="color:#a6e22e">startsWith&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Nick&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can then be used in our example tests as an alernative to the authorised user stub.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process_succeeds_when_user_is_authorised_and_notification_is_successful&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User authorisedUser &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FakeUser(&lt;span style="color:#e6db74">&amp;#34;Nick Ebbitt&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationStub successfulNotificationStub &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationStub(Result.&lt;span style="color:#a6e22e">SUCCESS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotificationService testSubject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotificationService(authorisedUser);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertTrue(testSubject.&lt;span style="color:#a6e22e">process&lt;/span>(successfulNotificationStub));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And with that we have covered the test doubles I set out to in this post. The Dummy, Stub, Spy, Mock and finally the Fake.&lt;/p>
&lt;h1 id="wrapping-up">Wrapping Up&lt;/h1>
&lt;p>First of all, if you&amp;rsquo;ve made it this far then thanks for reading, I hope you found it worthwhile :)&lt;/p>
&lt;blockquote>
&lt;p>Know your test doubles, not everything is a &amp;ldquo;mock&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;p>Hopefully, if not already, you now have a better understanding of the different types of test doubles that can be used to help us test your code.&lt;/p>
&lt;blockquote>
&lt;p>Try to write clean tests that speak to you.&lt;/p>
&lt;/blockquote>
&lt;p>With this shared understanding and vocabulary, as developers we can have better conversations around the design of our tests.&lt;/p>
&lt;blockquote>
&lt;p>When using a mocking framework, think about the test doubles in play.&lt;/p>
&lt;/blockquote>
&lt;p>This should mean we are better placed to choose the right test double for our use-case.&lt;/p>
&lt;blockquote>
&lt;p>Where it makes sense, use the power of a mocking framework to help write your tests, but do so with a good understanding of how they work.&lt;/p>
&lt;/blockquote>
&lt;p>We&amp;rsquo;ll also be more aware of the test-cases that genuinely benefit from using a mocking framework, and when you do you&amp;rsquo;ll understand the work they are doing for you under the hood.&lt;/p>
&lt;blockquote>
&lt;p>Agree on practices &amp;amp; principles with your team, be consistent.&lt;/p>
&lt;/blockquote>
&lt;p>Regardless of whether you roll your own doubles, use a mocking framework or a apply a mixture of both I believe its really valuable to discuss and agree the approach and style as a team. The value of a codebase with a consistent and coherent style shouldn&amp;rsquo;t be underestimated.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://xunitpatterns.com/">xUnit Patterns&lt;/a> - Gerard Mezaros&lt;/li>
&lt;li>&lt;a href="https://martinfowler.com/bliki/TestDouble.html">Test Double&lt;/a> - Martin Fowler&lt;/li>
&lt;li>&lt;a href="https://martinfowler.com/bliki/UnitTest.html">Unit Test&lt;/a> - Martin Fowler&lt;/li>
&lt;li>&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&amp;rsquo;t Stubs&lt;/a> - Martin Fowler&lt;/li>
&lt;li>&lt;a href="https://8thlight.com/blog/uncle-bob/2014/05/14/TheLittleMocker.html">The Little Mocker&lt;/a> - Robert C. Martin&lt;/li>
&lt;/ul></content></item><item><title>JAlba 2019</title><link>https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/</guid><description>On the morning of 23rd May 2019 a group of Java enthusiasts from around the world converged on the historic Scottish city of Edinburgh for the 2nd edition of JAlba Unconference.
For the 2nd time, JAlba did not dissappoint!
JAlba is a special kind of conference that follows the open space format. After attending JCrete in 2016, this quickly became my favourite kind of conference, and with JAlba being closer to home it&amp;rsquo;s an event that would be rude to miss.</description><content>&lt;p>On the morning of 23rd May 2019 a group of Java enthusiasts from around the world converged on the historic Scottish city of Edinburgh for the 2nd edition of &lt;a href="https://jalba.scot/">JAlba Unconference&lt;/a>.&lt;/p>
&lt;p>For the 2nd time, JAlba did not dissappoint!&lt;/p>
&lt;p>&lt;img alt="Edinburgh" src="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/edinburgh.jpg">&lt;/p>
&lt;p>JAlba is a special kind of conference that follows the &lt;a href="https://en.wikipedia.org/wiki/Open_Space_Technology">open space&lt;/a> format. After attending &lt;a href="http://www.jcrete.org/">JCrete&lt;/a> in &lt;a href="https://nickebbitt.github.io/blog/2016/11/29/jcrete-2016">2016&lt;/a>, this quickly became my favourite kind of conference, and with JAlba being closer to home it&amp;rsquo;s an event that would be rude to miss.&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s basically JCrete but colder and no Cretan Raki.&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s not a problem though as there are many reasons other than the weather and alcohol that I enjoy this style of conference. The main one for me is that sessions are discussion based. Rather than being a consumer of a presentation for 45 minutes I&amp;rsquo;m actually involved in a conversation around a topic of interest. I feel I gain so much more from the open and collaborative setting that this creates.&lt;/p>
&lt;p>JAlba is structured in such a way that after the planned sessions finish for the day everyone heads out as a group on excursions. The excursions are chosen to create the ideal environment for more geeky discussions that take on a more ad hoc and dynamic nature.&lt;/p>
&lt;p>This year we headed to a lovely little village called Culross where a few us snuck off for a bit of geocaching. There was also a boat trip on the Firth of the Forth including a visit to &lt;a href="https://www.maidoftheforth.co.uk/inchcolm-island">Incholm Island&lt;/a> where we luckily managed to escape being attacked by nesting seagulls, except for Alex Theedom that is who quickly popped his umbrella for protection!&lt;/p>
&lt;p>&lt;img alt="Incholm Seagulls" src="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/seagulls.jpg">&lt;/p>
&lt;p>&lt;a href="https://twitter.com/jim__gough">Jim Gough&lt;/a> and &lt;a href="https://twitter.com/rfscholte">Robert Scholte&lt;/a> somehow convinced a few of us to join them on a late night geocaching adventure to hunt down a cache they failed to find last year. We failed again! I suppose searching for a cache in the dark doesn&amp;rsquo;t help! It does mean we&amp;rsquo;ll have to come back next year for another look though, oh well.&lt;/p>
&lt;p>&lt;img alt="Night Caching" src="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/night-caching.jpg">&lt;/p>
&lt;p>During this little adventure I had a great discussion about community and got some new ideas to take back and apply to the Manchester Java Community.&lt;/p>
&lt;p>I attended many sessions on topics such as the social impact of technology, craftsmanship, whether you should buy or build and mentoring. Jim Gough has provided a write up for a couple of the sessions he facilitated on &lt;a href="https://jpgough.github.io/blog/2019/05/26/jalba-tdd-dead">&amp;ldquo;Is TDD dead?&amp;rdquo;&lt;/a> and &lt;a href="https://jpgough.github.io/blog/2019/05/30/jalba-advocate">&amp;ldquo;Becoming a Developer Advocate&amp;rdquo;&lt;/a> that are definitely worth checking out.&lt;/p>
&lt;p>&lt;img alt="The Marketplace" src="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/marketplace.jpg">&lt;/p>
&lt;p>At work I&amp;rsquo;ve been spending a lot of time exploring the ideas behind a service mesh and playing around with Envoy proxy. I was lucky enough to run a session on service mesh exploring the questions of &amp;ldquo;What is it?&amp;rdquo; and &amp;ldquo;Do you need one?&amp;rdquo;.&lt;/p>
&lt;h1 id="service-mesh">Service Mesh&lt;/h1>
&lt;p>At an unconference such as this it is the responsibility of the person who proposed the topic to facilitate the session. I gave a short introduction describing what a service mesh is and some of the problems it solves.&lt;/p>
&lt;p>&lt;img alt="service mesh intro" src="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/service-mesh-intro.jpg">&lt;/p>
&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>We talked about the fact that a lot of engineering teams are building microservice based architectures. Naturally this style of architecture increases the number of network endpoints in a system significantly, all potentionally implemented using different technologies. There are a number of capabilities required by the services running behind each of the endpoints in a system such as this that are common. This is one reason why a service mesh can be useful.&lt;/p>
&lt;p>Often capabilities such as encryption, service discovery and identity are provided through the use of libraries that are built in to the business application being deployed. With a service mesh these capabilities are pushed down to the network. One way of describing this is that the capabilities are provided out-of-process and a common implementation pattern is to deploy a side-car on the same host as the business application to act as a lightweight proxy. &lt;a href="https://www.envoyproxy.io/">Envoy proxy&lt;/a> is an example of a side-car proxy that be used to create a service mesh.&lt;/p>
&lt;p>The service mesh and side-car pattern are a way of providing cross-cutting concerns and you can draw parallels with Aspect Oriented Programming in the way that the side-car proxy wraps the business app, intercepts requests to and from it and transparently provides various capabilities without having to implement them in the business application. This is a really powerful idea, particularly when you consider that many teams or organisations are deploying systems consisting of applications written in a variety of programming languages. With a service mesh you can provide a consistent set of capabilties across the whole system.&lt;/p>
&lt;blockquote>
&lt;p>Maybe the service mesh helps microservices actually become micro?&lt;/p>
&lt;/blockquote>
&lt;p>Not only do you get capabilities such as those previously mentioned, once all your services are connected using something like Envoy you can gain a great level of visibility for your system through a rich collection of metrics that are exposed as well as request tracing.&lt;/p>
&lt;h2 id="some-discussion">Some discussion&amp;hellip;&lt;/h2>
&lt;p>As with all sessions at an unconference such as this the value is in the conversation.&lt;/p>
&lt;p>It was a small group for this session but it was interesting to discover that amongst us the concept of a &lt;em>service mesh&lt;/em> wasn&amp;rsquo;t as well known as I though it might be.&lt;/p>
&lt;p>The discussion therefore focused around my experience to try to answer the question of why you might want or need a service mesh.&lt;/p>
&lt;p>Other than recent proof of concept work with Envoy my real practical experience was gained whilst working at Auto Trader. I worked on a infrastructure focused team responsible for migrating from a private cloud &amp;amp; virtual machine based platform to public cloud &amp;amp; containers, specifically &lt;a href="https://cloud.google.com/kubernetes-engine/">GKE&lt;/a>. A popular service mesh offering for Kubernetes is &lt;a href="https://istio.io/">Istio&lt;/a> and Auto Trader were early adopters of it.&lt;/p>
&lt;p>Istio uses Envoy under-the-hood as the side-car proxy running alongside each service in the mesh but it also provides much more than that. It provides the control plane for the mesh that configures the side-cars (Pilot) as well as other capabilties such certificate management (Citadel) and integrations with monitroing (e.g. Prometheus) and tracing (e.g. Jaeger). There&amp;rsquo;s much more that I won&amp;rsquo;t go into too&amp;hellip;&lt;/p>
&lt;p>Jim Gough gave us a demo of his project that shows some of Istio&amp;rsquo;s capabilities around traffic routing based on API versions and fault injection, as well the service metrics that you get out of the box. Very cool!&lt;/p>
&lt;p>&lt;img alt="istio" src="https://www.nickebbitt.com/blog/2019/06/07/jalba-2019/istio.jpg">&lt;/p>
&lt;p>At Auto Trader one of the main capabilities Istio helped to provide was mutual TLS between services in the mesh. Another key element was the high level of visibility that it provided out of the box enabling us to discover problems with applications that we didn&amp;rsquo;t even know we had on the previous platform.&lt;/p>
&lt;p>Granted, you can solve all these problems in various ways but I think real power of the service mesh is that you can provide these capabilities across all services in your system in a consistent way and transparently to your business applications. Of course, if you&amp;rsquo;re on Kubernetes this becomes even easier.&lt;/p>
&lt;h2 id="do-you-need-one">Do you need one?&lt;/h2>
&lt;p>I suppose it depends :)&lt;/p>
&lt;p>My experience being part of a team building a new delivery platform on top of Kubernetes tells me that providing a service mesh as part of the platform can be hugely valuable. It does however increase the complexity of your system so that&amp;rsquo;s definitely something to bare in mind.&lt;/p>
&lt;p>In my view, if you have a way of providing the equivalent benefits of a service mesh with less effort and complexity then you should definitely choose that. Otherwise, maybe providing a service mesh as part of your platform offering is a good way to provide a number of core capabilities that most platforms need or could beneift from.&lt;/p>
&lt;p>I imagine whether you are building a new platform or looking to retrofit a service mesh into an existing platform will play heavily into the engineering effort required to deliver it.&lt;/p>
&lt;h1 id="thanks">Thanks!&lt;/h1>
&lt;p>To finish off this post I just want to say thanks to &lt;a href="https://twitter.com/mauricenaftalin">Maurice Naftalin&lt;/a> and the other JAlba disorganisers who made it happen.&lt;/p>
&lt;p>Through organising &lt;a href="https://mcrjava.github.io/jmanc/">JManc&lt;/a> the last couple of years, which is only a single day event, I know how it can feel at times, wondering if anyone will come, debating whether it&amp;rsquo;s all worthwhile etc.&lt;/p>
&lt;p>I&amp;rsquo;d just like to say it definitely is worthwhile and I hopefully speak for all attendees when I say we appreciate it.&lt;/p>
&lt;p>It&amp;rsquo;s a great thing that we have a multi-day event of this kind in the UK focused around Java and it&amp;rsquo;s ecosystem, long may it continue!&lt;/p></content></item><item><title>My thoughts on software development</title><link>https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/</link><pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/</guid><description>Around the beginning of this year as I was transitioning between jobs I decided to start writing down my views on software development.
The majority of the ideas, approaches, principles and values in here are things I&amp;rsquo;ve learned about, experienced or simply formed an opinion on over the last 5 years or so.
This post is basically a dump of those thoughts.
There&amp;rsquo;s likely nothing new here - I&amp;rsquo;ve learnt all I know from the amazing people I&amp;rsquo;ve worked with, consuming many books &amp;amp; videos (both software related and not), attending conferences and simply engaging with the many talented people in the various tech communities I&amp;rsquo;m involved with such as the Manchester Java Community.</description><content>&lt;p>Around the beginning of this year as I was transitioning between jobs I decided to start writing down my views on software development.&lt;/p>
&lt;p>The majority of the ideas, approaches, principles and values in here are things I&amp;rsquo;ve learned about, experienced or simply formed an opinion on over the last 5 years or so.&lt;/p>
&lt;p>This post is basically a dump of those thoughts.&lt;/p>
&lt;p>There&amp;rsquo;s likely nothing new here - I&amp;rsquo;ve learnt all I know from the amazing people I&amp;rsquo;ve worked with, consuming many books &amp;amp; videos (both software related and not), attending conferences and simply engaging with the many talented people in the various tech communities I&amp;rsquo;m involved with such as the Manchester Java Community.&lt;/p>
&lt;p>Apologies if I&amp;rsquo;ve not referenced quotes or ideas where I should have - if so please let me know and I&amp;rsquo;ll update the post.&lt;/p>
&lt;p>This is mainly a reference for future me, I may come back and update it from time to time as my thoughts evolve. It&amp;rsquo;ll be great if anyone else finds it useful too.&lt;/p>
&lt;ul>
&lt;li>Will be replaced with the ToC
{:toc}&lt;/li>
&lt;/ul>
&lt;h1 id="culture">Culture&lt;/h1>
&lt;h2 id="prioritise-the-well-being-of-the-team">Prioritise the well being of the team&lt;/h2>
&lt;p>The well being of the team is more important than delivery. A happy and healthy team will likely result in good delivery anyway.&lt;/p>
&lt;p>No one should feel undue pressure to deliver change at the expense of their physical or mental health.&lt;/p>
&lt;p>No one should be expected to sacrifice their personal time to meet deadlines. This indicates a problem with the process, not the person.&lt;/p>
&lt;h2 id="ownership">Ownership&lt;/h2>
&lt;p>The team owns the process.&lt;/p>
&lt;p>Everyone on the team should feel empowered to challenge the status quo and lead the team with new ideas.&lt;/p>
&lt;p>The absence of senior team members should not prevent decisions on what/how to get things done. Standard events such as stand-ups/retros/showcases should still happen due to a collective ownership of these things.&lt;/p>
&lt;p>Encourage ideas and leadership qualities from all team members.&lt;/p>
&lt;p>Distribute responsibility for organising/running things such as:&lt;/p>
&lt;ul>
&lt;li>showcases&lt;/li>
&lt;li>retros&lt;/li>
&lt;li>&lt;a href="https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/#code-review">code review&lt;/a> sessions / katas&lt;/li>
&lt;/ul>
&lt;h2 id="working-software">Working software&lt;/h2>
&lt;p>At all times, the goal is for the application to be releasable.&lt;/p>
&lt;p>We should always be able to show what we have built.&lt;/p>
&lt;p>Demonstrate value, regularly.&lt;/p>
&lt;h2 id="a-safe-environment">A safe environment&lt;/h2>
&lt;p>The team environment should be a safe space.&lt;/p>
&lt;p>Failure is not a problem, it&amp;rsquo;s a learning opportunity.&lt;/p>
&lt;p>If a failure has an adverse impact, then it&amp;rsquo;s a failure of the process, not the individual.&lt;/p>
&lt;p>We should encourage experimentation, take calulated risks, and learn from the feedback.&lt;/p>
&lt;h2 id="collaboration">Collaboration&lt;/h2>
&lt;p>Wherever possible, find ways to work together on tasks. The value realised through shared knowledge, early/regular feedback and the general good team spirit this helps to create should outweigh any perceived short-term benefits of parellelising tasks.&lt;/p>
&lt;h2 id="support-driven-engineering">Support Driven Engineering&lt;/h2>
&lt;p>See &lt;a href="http://willgallego.com/2018/12/09/support-driven-engineering-sde/">Support Driven Engineering (SDE) – Will Gallego&lt;/a>.&lt;/p>
&lt;p>Team members who want to help those around them succeed are invaluable. Encourage everyone to have this mindset.&lt;/p>
&lt;p>A key sign of a &amp;ldquo;senior&amp;rdquo; engineer is one who works hard to ensure those around them can achieve what they need to.&lt;/p>
&lt;p>This can be through picking up the gnarly tasks that others avoid, or just unblocking their team mates when they get stuck, or in many other selfless ways.&lt;/p>
&lt;h2 id="personal-development">Personal development&lt;/h2>
&lt;p>Everyone is responsible for their own learning and development. Good companies and managers will help you fulfil your ambitions and reach your goals. They can&amp;rsquo;t if you don&amp;rsquo;t tell them though.&lt;/p>
&lt;h1 id="process">Process&lt;/h1>
&lt;p>Central to any software development process is risk management. The &lt;a href="https://github.com/risk-first/website/wiki">risk-first&lt;/a> wiki provides an interesting analysis of various apsects of software development and how they compare in relation to risk.&lt;/p>
&lt;h2 id="simple-valuable-incrementally">Simple, Valuable, Incrementally&lt;/h2>
&lt;blockquote>
&lt;p>Keep It Simple, Make it Valuable, Built It Piece by Piece
&lt;strong>Ron Jeffries&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>We try to develop the simplest thing that could possibly be useful, deliver it, and get feedback. Then we add to that.
&lt;strong>David Tanzen&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="planning">Planning&lt;/h2>
&lt;p>Some upfront design is essential.&lt;/p>
&lt;p>Collaborative design sessions.&lt;/p>
&lt;p>Produce useful artifacts. See &lt;a href="https://c4model.com/">The C4 model for software architecture&lt;/a>.&lt;/p>
&lt;p>Feature slicing, make sure deliverables are a good size. See &lt;a href="https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/#small-changes">Small changes&lt;/a>.&lt;/p>
&lt;h2 id="user-stories">User Stories&lt;/h2>
&lt;p>Whether user stories are captured using post-its on a wall, Trello cards or JIRA tickets, they should be created as a placeholder for a discussion. They shouldn&amp;rsquo;t contain detailed requirements.&lt;/p>
&lt;p>This helps to ensure the necessary conversations and detailed anaylsis occur as near as possible to when the story is actually worked on. This is particularly important as often storties in a backlog never get picked up so why waste time performing detailed analysis on them.&lt;/p>
&lt;p>It also helps to ensure that the people who work on the story are the same people who understand the detail and have contributed to the decisions made.&lt;/p>
&lt;h2 id="feedback-loops">Feedback loops&lt;/h2>
&lt;p>Short feedback loops are key to being productive.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>IDE&amp;rsquo;s set up to provide feedback on style etc.&lt;/li>
&lt;li>Very fast unit tests.&lt;/li>
&lt;li>Customer involved in process to provide regular feedback.&lt;/li>
&lt;/ul>
&lt;p>Learning opportunities, the sooner we can learn something new about our product/process/etc., the sooner we can make a change and iterate.&lt;/p>
&lt;h2 id="daily-stand-ups">Daily stand-ups&lt;/h2>
&lt;p>Key for team synchronisation, should be quick, 1 min max per person. Break-out meetings where necessary.&lt;/p>
&lt;p>Focus on the value.&lt;/p>
&lt;h2 id="showcases">Showcases&lt;/h2>
&lt;p>Regularly demonstrate the changes the team has built, or lessons learnt to other teams, stakeholders.&lt;/p>
&lt;h2 id="retrospectives">Retrospectives&lt;/h2>
&lt;p>Regular retros are very important.&lt;/p>
&lt;p>&lt;strong>TODO:&lt;/strong> research/practice running effective retros and ensure outcomes are actionable and met.&lt;/p>
&lt;h2 id="estimates">Estimates&lt;/h2>
&lt;p>Estimating based on time is a waste, instead make stories/changes (feature slices) small enough to deliver a slice of value in 1-2 days.&lt;/p>
&lt;p>Esimate the size of a feature. Use experience. Use t-shirt sizes e.g. Small, Medium or Large.&lt;/p>
&lt;p>Only start development work on features once they have sliced into Small tasks. See &lt;a href="https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/#small-changes">Small changes&lt;/a>.&lt;/p>
&lt;p>Choose the most valuable features first. Always ensure priorities are driven by business value.&lt;/p>
&lt;h2 id="small-changes">Small changes&lt;/h2>
&lt;p>The smaller the changes we commit/merge to master the better.&lt;/p>
&lt;p>Reduce every change proposal to its absolutely minimally viable form. See &lt;a href="https://about.gitlab.com/handbook/product/#the-minimally-viable-change">Minimally Viable Change&lt;/a>.&lt;/p>
&lt;p>Why?&lt;/p>
&lt;ul>
&lt;li>smaller changes easier to review&lt;/li>
&lt;li>less risk&lt;/li>
&lt;li>easier to test&lt;/li>
&lt;li>easier understand&lt;/li>
&lt;li>easier to reason about&lt;/li>
&lt;/ul>
&lt;h2 id="wip-limits">WIP limits&lt;/h2>
&lt;p>Always allow time to do the right thing i.e write tests, refactor, design.&lt;/p>
&lt;p>Use Work in Progress (WIP) limits to ensure the team doesn&amp;rsquo;t take on too much work, and always has space for unplanned work that may (and will) arise.&lt;/p>
&lt;p>WIP limits can be good to promote pairing e.g use a WIP limit that is half the number of team members.&lt;/p>
&lt;h2 id="handling-blockers">Handling blockers&lt;/h2>
&lt;p>Blocked tasks are those where it is unable to progress due to lack of skills or knowledge that are available within the team.&lt;/p>
&lt;p>Waiting tasks are those that are dependent on an external party/process to the team e.g. regulatory sign-off etc.&lt;/p>
&lt;blockquote>
&lt;p>Blocking != Waiting&lt;/p>
&lt;/blockquote>
&lt;p>Encourage individuals to feel responsible for all tasks, not just the ones they are assigned to.&lt;/p>
&lt;p>If a task is blocked, expect team to work together to unblock through knowledge sharing, pairing or mobbing.&lt;/p>
&lt;p>Team should swarm on blocked tasks to ensure they are unblocked ASAP.&lt;/p>
&lt;h2 id="progress">Progress&lt;/h2>
&lt;p>The best indicator of progress is new features running in production.&lt;/p>
&lt;p>Working closely with the customer reduces the need to produce detailed reports relating to progress.&lt;/p>
&lt;p>Interesting metrics to observe are:&lt;/p>
&lt;ul>
&lt;li>the time from when a task is picked up to running in production&lt;/li>
&lt;li>how long tasks sit in a &amp;ldquo;blocked&amp;rdquo; (i.e. under our control) state&lt;/li>
&lt;li>how long tasks sit in a &amp;ldquo;waiting&amp;rdquo; (i.e. out of our control) state&lt;/li>
&lt;/ul>
&lt;p>See &lt;a href="https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/#handling-blockers">Handling blockers&lt;/a>&lt;/p>
&lt;h2 id="architectural-decision-records-adrs">Architectural Decision Records (ADRs)&lt;/h2>
&lt;blockquote>
&lt;p>We will keep a collection of records for &amp;ldquo;architecturally significant&amp;rdquo; decisions: those that affect the structure, non-functional characteristics, dependencies, interfaces, or construction techniques.&lt;/p>
&lt;/blockquote>
&lt;p>See &lt;a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">Documenting Architecture Decisions&lt;/a> introduced by &lt;a href="https://twitter.com/mtnygard">Michael Nygard&lt;/a>.&lt;/p>
&lt;h1 id="technical-practices">Technical Practices&lt;/h1>
&lt;h2 id="trunk-based-development">Trunk-based development&lt;/h2>
&lt;p>See &lt;a href="https://trunkbaseddevelopment.com/">Trunk Based Development&lt;/a>.&lt;/p>
&lt;p>Integrate often with master.&lt;/p>
&lt;p>No shared branches, or short-lived private feature branches ok (no more than 1-2 days).&lt;/p>
&lt;p>Release branches ok.&lt;/p>
&lt;p>Why?&lt;/p>
&lt;ul>
&lt;li>smaller batches, easier to merge&lt;/li>
&lt;li>merge often to reduce conflict&lt;/li>
&lt;li>if PRs, easier to review&lt;/li>
&lt;/ul>
&lt;p>Continuous code review required to support this.&lt;/p>
&lt;h2 id="pairing">Pairing&lt;/h2>
&lt;p>Encourage pairing, limit &lt;a href="https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/#wip-limits">WIP&lt;/a> to assist this.&lt;/p>
&lt;p>Don&amp;rsquo;t enforce 100% pairing, allow space for individual work.&lt;/p>
&lt;p>Pairing works well but can be mentally draining.&lt;/p>
&lt;p>Keep it fresh by rotating roles and pairs.&lt;/p>
&lt;h2 id="test-driven-development-tdd">Test-Driven Development (TDD)&lt;/h2>
&lt;p>A very useful but difficult to master technique.&lt;/p>
&lt;p>Having tests is the most important thing. Writing them first should help us to produce better designs.&lt;/p>
&lt;p>TDD is less about testing, more about using examples to drive out the design of an application&lt;/p>
&lt;p>Needs investment as a team to use a test-driven approach to feature development.&lt;/p>
&lt;p>Identify where engineers need help via pairing or training.&lt;/p>
&lt;h2 id="test-doubles--mocking">Test-doubles / mocking&lt;/h2>
&lt;p>While frameworks such as Mockito are really powerful and can be useful to assist with testing, prefer a simpler approach to test-doubles e.g. for simple use-cases, roll your own stubs or spys.&lt;/p>
&lt;p>Don&amp;rsquo;t over use &amp;ldquo;mocks&amp;rdquo;, usually testing more real things is more valuable.&lt;/p>
&lt;p>Doubles can be really useful as the design of an API emerges using a &lt;a href="https://www.nickebbitt.com/blog/2019/03/01/my-thoughts-on-software-development/#test-driven-development-tdd">TDD&lt;/a> approach.&lt;/p>
&lt;h2 id="end-to-end-tests">End-to-end tests&lt;/h2>
&lt;p>Exercising end-to-end use-cases to verify the application is really useful. These tests should be written to reflect real usage of the system from a black box perspective.&lt;/p>
&lt;h2 id="code-review">Code review&lt;/h2>
&lt;p>When pairing/mobbing, code review is a continuous interactive process between those involved.&lt;/p>
&lt;p>Sometimes it can be useful to review code as a team. The collaborative process of reviewing a section of code in the system that has proven difficult to work with can work well. Make sure it is a safe space and those who wrote the code are comfortable with the process.&lt;/p>
&lt;p>No blame should be associated with poorly written code. It is simply a learning opportunity.&lt;/p>
&lt;h2 id="development-spikes">Development spikes&lt;/h2>
&lt;p>If we are uncertain about how to deliver a feature, we should use time-boxed development spikes to explore the options.&lt;/p>
&lt;p>Aim is to learn quickly whether an idea has legs, if so invest more time to do it properly, otherwise pivot and try something else.&lt;/p>
&lt;h2 id="continuously-deploy-changes">Continuously Deploy Changes&lt;/h2>
&lt;p>Every change should be deployable. We can choose when to release.&lt;/p>
&lt;p>Fully automated process should be capable of building &amp;amp; testing every commit, provisioning test environments, executing automated tests of various varieties to gain confidence.&lt;/p>
&lt;p>Every change to the software should be deployed.&lt;/p>
&lt;p>Ship continuously, not just at the end of a sprint.&lt;/p>
&lt;p>This proves we can deploy when needed and helps to ensure when the pressure is on (e.g. a customer impacting issue) we can deploy quickly and safely.&lt;/p>
&lt;blockquote>
&lt;p>Deployment != Release&lt;/p>
&lt;/blockquote>
&lt;p>Changes can be deployed without releasing them to the customer using techniques such as &lt;a href="https://martinfowler.com/articles/feature-toggles.html">Feature Toggles (aka Feature Flags)&lt;/a>.&lt;/p></content></item><item><title>A year with the Manchester Java Community</title><link>https://www.nickebbitt.com/blog/2018/01/06/a-year-with-the-manchester-java-community/</link><pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2018/01/06/a-year-with-the-manchester-java-community/</guid><description>Following JCrete in the summer of 2016 I returned inspired by the people I had met and highly motivated to become more involved in the local tech community. This led me to attend more events such as XP Manchester and the Manchester Java Community (MJC). I also offered to speak at a future MJC event if they would be open to it.
In October 2016 I did my first (and only so far) public tech talk for the MJC.</description><content>&lt;p>Following &lt;a href="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/">JCrete&lt;/a> in the summer of 2016 I returned inspired by the people I had met and highly motivated to become more involved
in the local tech community. This led me to attend more events such as XP Manchester and the Manchester Java Community (MJC). I also offered to speak at a future MJC event if they would be open to it.&lt;/p>
&lt;p>In October 2016 I did my first (and only so far) public &lt;a href="https://www.nickebbitt.com/blog/2017/01/01/making-a-mockery-of-web-services/">tech talk&lt;/a> for the MJC. Following this I caught up with one of the MJC leaders &lt;a href="https://twitter.com/alisonmcgreavy">Alison McGreavy&lt;/a> (who founded the group back in 2013) for some feedback. She provided some useful feedback about my talk and then to my surprise she asked if I&amp;rsquo;d like to help run the event along with her and &lt;a href="https://twitter.com/debbieroycroft">Debbie Roycroft&lt;/a>. At this point I had little idea what it would involve but decided to dive right in and accepted her offer.&lt;/p>
&lt;p>Over the course of the year we held 10 events in total. Six of these were what I would call traditional events with a speaker presenting on a specific topic for around 45 mins, one of which was with a remote speaker. We had one event that consisted of &lt;em>lightning&lt;/em> talks lasting approximately 15 minutes each. We had two pratcial sessions, one a hands-on kata and the other as part of a a global online hackday. Finally, we joined the &lt;a href="https://virtualjug.com/vjug24-session-20-ways-to-boost-dev-productivity/">vJUG24&lt;/a> online conference.&lt;/p>
&lt;p>We hosted the events at a variety of great venues such as the event spaces at Auto Trader, Rental Cars, Coop (Federation House) and BJSS as well as a couple at our spiritual home of MadLab.&lt;/p>
&lt;p>I&amp;rsquo;ve met a real mix of people at the events over the year from students and Java developers just starting out in their tech career to seasoned professionals. The one constant from pretty much everyone I&amp;rsquo;ve met is their passion for technology and Java in particular.&lt;/p>
&lt;p>Out of all the events we ran this year, the following are those that really stood out for me.&lt;/p>
&lt;h2 id="4th-birthday-kata">4th Birthday Kata&lt;/h2>
&lt;p>April marked the 4th anniversary since the MJC was founded. The first event was held at MadLab and attended by a grand total of 4 people, two of which were Alison McGreavy and Debbie Roycroft. Since these humble beginnings the group has grown to over 700 members in 4 years which is a great achievement.&lt;/p>
&lt;p>We decided to hold a more hands-on practical meetup for this event. We found what looked like an interesting &lt;a href="http://matteo.vaccari.name/blog/archives/154">birthday themed kata&lt;/a> designed by &lt;a href="http://matteo.vaccari.name/">Matteo Vaccari&lt;/a> based on exploring an approach to software architecture known as &lt;a href="http://alistair.cockburn.us/Hexagonal+architecture">Hexagonal Architecture&lt;/a> (aka Ports &amp;amp; Adapters).&lt;/p>
&lt;p>This was my first experience of a kata and I thought it was great. We had people working in pairs whilst Debbie Roycroft and I helped to ensure everyone made progress. There was a real mix of people of all skill levels and I got the feeling the majority enjoyed themselves and learned a few things along the way. I definitely did!&lt;/p>
&lt;p>Of course there was also lots of cake to help celebrate the birthday!&lt;/p>
&lt;h2 id="java-libraries-you-cant-afford-to-miss">Java libraries you can&amp;rsquo;t afford to miss&lt;/h2>
&lt;p>In August we held our first event with a remote speaker. We had originally planned for &lt;a href="https://twitter.com/aalmiray">Andres Almiray&lt;/a> to visit us in Manchester and speak however due to unforeseen circumstances he was unable to travel but still offered to speak for us, albeit remotely.&lt;/p>
&lt;p>This was a great opportunity for us to explore the technicalities around hosting a remote speaker. It was a bit of an experiment but if it went well then it would open up the possibility for more remote speakers in the future. One of the hardest parts of running the MJC is attracting speakers.&lt;/p>
&lt;p>Although we were stepping out of our comfort zone for this event it proved to be worth it. The event went smoothly, all the worries about connectivity and having the ability to communicate effectively with the Andres were unnecessary. The sound quality in the room we used for the meetup wasn&amp;rsquo;t ideal but we learned a good lesson for future events to perform more thorough sound checks.&lt;/p>
&lt;p>Most importantly though, Andres was a great speaker and shared some really useful content related to various key Java libraries for production and test use-cases. I&amp;rsquo;d recommend people reach out to him to speak at their events as I&amp;rsquo;m sure he&amp;rsquo;d be more than happy to speak either in person or remotely.&lt;/p>
&lt;p>The recording of this event is available on the &lt;a href="https://www.youtube.com/channel/UC1miBRxN26sOgX1KioPq3Qw">MJC YouTube channel&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="nikhil-nanivadekar">Nikhil Nanivadekar&lt;/h2>
&lt;p>At the end of November we had the pleasure of hosting &lt;a href="https://twitter.com/nikhilnanivade">Nikhil Nanivadekar&lt;/a>, project lead for the &lt;a href="https://www.eclipse.org/collections/">Eclispse Collections&lt;/a> open-source project. Nikhil recently became a Oracle Developer Champion and has spoken at many conferences including JavaOne.&lt;/p>
&lt;p>I first met Nikhil at JCrete in 2016 and we have remained friends since. He visited Manchester in the summer of 2017 and I joked that he should visit again soon and speak at the MJC. A few months later and he was back as part of a &lt;a href="https://medium.com/@nikhilnanivadekar/november-java-user-group-tour-2017-dbb103b80532">JUG tour&lt;/a> that took him to London, Belfast, Dublin, Edinburgh, Manchester and Birmingham.&lt;/p>
&lt;p>He provided a very entertaining talk comparing Eclipse Collections with other collections libraries such as those available in the JDK, Guava, Apache Collections and Vavr. He covered off various factors such as performance, memory footprint and ease of use. The &lt;a href="https://www.youtube.com/watch?v=QwZF8xQHlxE&amp;t=2s">video&lt;/a> of this talk from JavaOne is available where Nikhil presents with the co-authors of the talk.&lt;/p>
&lt;p>As well as this, Nikhil also managed to squeeze in a second talk describing the process involved in migrating Eclipse Collections to Java 9.&lt;/p>
&lt;p>The passion for his work shone through during his talk which, when added to his unique sense of humour, made this the highlight of the year for me.&lt;/p>
&lt;p>Don&amp;rsquo;t forget to &lt;em>star&lt;/em> that &lt;a href="https://github.com/eclipse/eclipse-collections">GitHub repo&lt;/a>!&lt;/p>
&lt;h1 id="final-thoughts">Final thoughts&lt;/h1>
&lt;p>My involvement with the MJC over the last year has been amazing on many levels.&lt;/p>
&lt;p>I&amp;rsquo;ve met great people from the local tech community as well speakers and other JUG leaders from around the world.&lt;/p>
&lt;p>I have no doubt that my involvement with the MJC has led to other great opportunities such as volunteering at &lt;a href="https://www.devoxx.co.uk/">Devoxx UK&lt;/a> and realising an ambition of mine to work for one of the leading digital companies in Manchester.&lt;/p>
&lt;p>Something I hadn&amp;rsquo;t realised is how much time &amp;amp; effort goes into just making sure an event goes ahead. All the time that goes into finding venues and speakers ain&amp;rsquo;t trivial.&lt;/p>
&lt;p>I&amp;rsquo;m really looking forward to what the coming year holds for the MJC. We are in discussions with some exciting speakers and also have some ambitious plans to run an unconference later this year. Hopefully our ambitions are realised.&lt;/p></content></item><item><title>Git aliases</title><link>https://www.nickebbitt.com/blog/2017/08/21/git-aliases/</link><pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/08/21/git-aliases/</guid><description>Git aliases are a cool feature. With a little config you can power up your Git command line.
Here a few I have configured that make my day-to-day use of Git much nicer.
status This alias saves me typing a few characters (I&amp;rsquo;m lazy):
alias.st=git status I can then save my fingers some effort by writing git st to quickly check the status of repo.
log I have the following alias configured that I use in place of the standard git log command:</description><content>&lt;p>&lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">Git aliases&lt;/a> are a cool feature. With a little config you can power up your Git command line.&lt;/p>
&lt;p>Here a few I have configured that make my day-to-day use of Git much nicer.&lt;/p>
&lt;h2 id="status">status&lt;/h2>
&lt;p>This alias saves me typing a few characters (I&amp;rsquo;m lazy):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>alias.st&lt;span style="color:#f92672">=&lt;/span>git status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I can then save my fingers some effort by writing &lt;code>git st&lt;/code> to quickly check the status of repo.&lt;/p>
&lt;h2 id="log">log&lt;/h2>
&lt;p>I have the following alias configured that I use in place of the standard &lt;code>git log&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>alias.lg1&lt;span style="color:#f92672">=&lt;/span>log --graph --abbrev-commit --decorate --format&lt;span style="color:#f92672">=&lt;/span>format:&lt;span style="color:#e6db74">&amp;#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)&amp;#39;&lt;/span> --all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias.lg2&lt;span style="color:#f92672">=&lt;/span>log --graph --abbrev-commit --decorate --format&lt;span style="color:#f92672">=&lt;/span>format:&lt;span style="color:#e6db74">&amp;#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n&amp;#39;&amp;#39; %C(white)%s%C(reset) %C(dim white)- %an%C(reset)&amp;#39;&lt;/span> --all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias.lg&lt;span style="color:#f92672">=&lt;/span>!git lg1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running &lt;code>git lg&lt;/code> produces the following output which is much nicer than the default:&lt;/p>
&lt;p>&lt;img alt="git lg" src="https://www.nickebbitt.com/blog/2017/08/21/git-aliases/git-lg.png">&lt;/p>
&lt;h2 id="pull--rebase">pull &amp;amp; rebase&lt;/h2>
&lt;p>When developing changes on a local branch, prior to pushing to the remote repo I will generally rebase against &lt;code>master&lt;/code>. To achieve this I also need to pull master first. As I do this regularly I&amp;rsquo;ve wrapped it in the following alias:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>alias.prom&lt;span style="color:#f92672">=&lt;/span>pull --rebase origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This allows me to simply run &lt;code>git prom&lt;/code> to get my branch bang up-to-date.&lt;/p>
&lt;hr>
&lt;p>I&amp;rsquo;d be interested to hear of any others people are using.&lt;/p></content></item><item><title>Reading a file in Java 8</title><link>https://www.nickebbitt.com/blog/2017/07/31/reading-a-file-in-java-8/</link><pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/07/31/reading-a-file-in-java-8/</guid><description>I always forget how to read the contents of a file, here&amp;rsquo;s the simplest way I&amp;rsquo;ve come across.
import java.io.IOException; import java.nio.file.Files; import java.nio.file.Paths; public static void main(String[] args) throws IOException { List&amp;lt;String&amp;gt; content = Files.readAllLines(Paths.get(&amp;#34;input.txt&amp;#34;)); } There are other variants of Files.readAllLines such as Files.readAllBytes etc.
Also, if it&amp;rsquo;s a Stream you&amp;rsquo;re after then use Files.lines, but don&amp;rsquo;t forget to close the stream (thanks Tim Yates!).</description><content>&lt;p>I always forget how to read the contents of a file, here&amp;rsquo;s the simplest way I&amp;rsquo;ve come across.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.IOException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.nio.file.Files;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.nio.file.Paths;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> content &lt;span style="color:#f92672">=&lt;/span> Files.&lt;span style="color:#a6e22e">readAllLines&lt;/span>(Paths.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;input.txt&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are other variants of &lt;code>Files.readAllLines&lt;/code> such as &lt;code>Files.readAllBytes&lt;/code> etc.&lt;/p>
&lt;p>Also, if it&amp;rsquo;s a &lt;code>Stream&lt;/code> you&amp;rsquo;re after then use &lt;code>Files.lines&lt;/code>, but don&amp;rsquo;t forget to close the stream (thanks &lt;a href="https://twitter.com/tim_yates">Tim Yates&lt;/a>!).&lt;/p></content></item><item><title>Continuous unit testing with Java &amp; Infinitest</title><link>https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/</link><pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/</guid><description>As my awareness around automated testing, and particularly TDD, has risen over the last few years I&amp;rsquo;ve been keeping my ear to the ground for new ideas and techniques I can experiment with.
I was recently at a meetup hosted by Equal Experts and there was a talk by Oliver Shaw on what &amp;ldquo;Doing TDD&amp;rdquo; is, and isn&amp;rsquo;t. The talk provided a great live demo of TDD exploring a fairly simple use-case but showing how natural the TDD process can be.</description><content>&lt;p>As my awareness around automated testing, and particularly TDD, has risen over the last few years I&amp;rsquo;ve been keeping my ear to the ground for new ideas and techniques I can experiment with.&lt;/p>
&lt;p>I was recently at a &lt;a href="https://www.meetup.com/Expert-Talks-Manchester/events/238434029/">meetup&lt;/a> hosted by Equal Experts and there was a talk by &lt;a href="https://twitter.com/olly_shaw">Oliver Shaw&lt;/a> on what &amp;ldquo;Doing TDD&amp;rdquo; is, and isn&amp;rsquo;t. The talk provided a great live demo of TDD exploring a fairly simple use-case but showing how natural the TDD process can be. The demo was done using Scala and he used Vim as his IDE which was impressive and very effective.&lt;/p>
&lt;p>The relevance to this post is that he was using an &lt;a href="http://www.scala-sbt.org/">SBT&lt;/a> task (&lt;a href="http://www.scala-sbt.org/0.13/docs/Testing.html#testQuick">&lt;code>~test-quick&lt;/code>&lt;/a>) to continuously watch for file changes and automatically run the unit tests against them when they changed. This allowed him to remain focused on the code and the cycles involved in TDD rather than breaking flow through repeatedly having to manually run the tests.&lt;/p>
&lt;p>I like the idea of this! Anything that can help to keep focus and make the process more efficient is worth a try.&lt;/p>
&lt;h2 id="what-is-continuous-unit-testing">What is continuous unit testing?&lt;/h2>
&lt;p>&lt;em>Continuous unit testing&lt;/em> is basically the idea that every time you make a change to your code, be that functional or test code, the tests that are associated with that change will automatically run. This is not be confused with &lt;a href="https://en.wikipedia.org/wiki/Continuous_testing">Continuous Testing&lt;/a> as part of a build pipeline.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Continuous unit testing&lt;/em> tools or frameworks use the concept of a &lt;em>test watcher&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;p>The &lt;em>test watcher&lt;/em> runs in the background and watches for changes on the source files you are working on. When a file changes the &lt;em>test watcher&lt;/em> triggers the execution of any related tests automatically.&lt;/p>
&lt;p>The standard TDD cycle, as per &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development#Test-driven_development_cycle">Wikipedia&lt;/a>, is:&lt;/p>
&lt;ul>
&lt;li>Add a test&lt;/li>
&lt;li>Run all tests to see if the new test fails&lt;/li>
&lt;li>Write the code&lt;/li>
&lt;li>Run tests&lt;/li>
&lt;li>Refactor code&lt;/li>
&lt;li>Repeat&lt;/li>
&lt;/ul>
&lt;p>Using a &lt;em>continuous unit testing&lt;/em> approach, the cycle becomes:&lt;/p>
&lt;ul>
&lt;li>Add a test &lt;em>(tests run automatically and see new test fail)&lt;/em>&lt;/li>
&lt;li>Write the code &lt;em>(tests run automatically and hopefully see all tests pass)&lt;/em>&lt;/li>
&lt;li>Refactor &lt;em>(tests run automatically and hopefully continue to see all tests pass)&lt;/em>&lt;/li>
&lt;li>Repeat&lt;/li>
&lt;/ul>
&lt;p>Each time the &lt;em>tests run automatically&lt;/em>, any failures are brought to the developers attention to be dealt with immediately. A fix can be applied, or the change that caused the failure reverted, at which point the tests automatically run again until you eventually get to the position of all tests passing.&lt;/p>
&lt;p>The &lt;em>continuous unit testing&lt;/em> approach has reduced the number of steps (not including &lt;em>Repeat&lt;/em>) in the TDD cycle from 5 to 3.&lt;/p>
&lt;p>Some benefits of this are:&lt;/p>
&lt;ul>
&lt;li>reduced context switching due to not having to manually run the tests&lt;/li>
&lt;li>shorter cycles (feedback loops) between making a change and finding if a test has passed, or failed&lt;/li>
&lt;/ul>
&lt;p>There are various tools available depending on your language of choice. The natural choice for Scala is likely SBT as mentioned above. This can also be used for Java based projects however another option that integrates with my IDE of choice, IntelliJ, is &lt;a href="https://infinitest.github.io/">Infinitest&lt;/a>.&lt;/p>
&lt;h2 id="infinitest">Infinitest&lt;/h2>
&lt;p>&lt;em>Infinitest&lt;/em> provides plugins for both Eclipse and IntelliJ. We will look at how it works with IntelliJ for the purposes of this post.&lt;/p>
&lt;p>The project&amp;rsquo;s website describes what &lt;em>Infinitest&lt;/em> does very nicely:&lt;/p>
&lt;blockquote>
&lt;p>Each time a change is made on the source code, Infinitest runs all the tests that might fail because of these changes.&lt;/p>
&lt;/blockquote>
&lt;p>The &lt;a href="http://infinitest.github.io/doc/user_guide.html">documentation&lt;/a> is pretty brief but from my experience it covers everything you need to know to get started and configure it in various ways.&lt;/p>
&lt;h3 id="intellij-setup">IntelliJ Setup&lt;/h3>
&lt;p>The first thing to do is install the plugin in IntelliJ. It can be found easily by searching the plugin repos.&lt;/p>
&lt;p>Once the plugin is installed, it needs to be configured for your project. This is achieved by adding a &lt;em>facet&lt;/em> to the project. Navigate to the &lt;em>Project Structure&lt;/em> view in IntelliJ (&lt;code>⌘;&lt;/code> on MacOS), select &lt;em>Facets&lt;/em> and click the add (&lt;code>+&lt;/code>) button. Select &lt;em>Infinitest&lt;/em> from the list and associate it with the module(s) in your project that you want &lt;em>Infinitest&lt;/em> to run against.&lt;/p>
&lt;p>&lt;img alt="Infinitest facet" src="https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/infinitest-facet.png">&lt;/p>
&lt;p>A new tool window should now be visible in the bottom panel of your IDE that indicates that &lt;em>Infinitest&lt;/em> is watching for changes.&lt;/p>
&lt;p>&lt;img alt="Infinitest window start" src="https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/infinitest-window-start.png">&lt;/p>
&lt;p>If configuring &lt;em>Infinitest&lt;/em> for a brand new project the window will be empty as there won&amp;rsquo;t yet be any tests. When adding &lt;em>Infinitest&lt;/em> to an existing project the window may also be empty as &lt;em>Infinitest&lt;/em> will only react to changes when the files you are changing are compiled.&lt;/p>
&lt;blockquote>
&lt;p>To support the continuous unit testing process, it makes sense to enable the &amp;ldquo;compile on save&amp;rdquo; feature in your IDE to ensure that the tests run automatically.&lt;/p>
&lt;/blockquote>
&lt;p>In IntelliJ this means enabling the feature to &lt;a href="https://www.mkyong.com/intellij/intellij-idea-how-to-build-project-automatically/">&lt;em>build the project automatically&lt;/em>&lt;/a>.&lt;/p>
&lt;p>Let&amp;rsquo;s write a failing test and take a another look at the window.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">thisFails&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(1, 2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On saving the test file, the &lt;em>Infinitest&lt;/em> window automatically refreshes, we see red and details of the test failure.&lt;/p>
&lt;p>&lt;img alt="Infinitest window failure" src="https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/infinitest-window-failure.png">&lt;/p>
&lt;p>Fixing the test and saving causes the window to automatically refresh again and we see green.&lt;/p>
&lt;p>&lt;img alt="Infinitest window passing" src="https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/infinitest-window-passing.png">&lt;/p>
&lt;p>That&amp;rsquo;s it, you&amp;rsquo;re good to go with your continuous unit testing setup.&lt;/p>
&lt;h3 id="more-on-test-failures">More on test failures&lt;/h3>
&lt;p>When a test fails you obviously want to understand why and fix it as soon as possible.&lt;/p>
&lt;p>Double clicking the failure in the &lt;em>Infinitest&lt;/em> window will take you straight to the line of code that caused the test to fail, usually an assertion but possibly an exception.&lt;/p>
&lt;p>In addition to this, &lt;em>Infinitest&lt;/em> will highlight the line of code that is failing by adding its icon to the side panel. Hovering over the icon will display the reason the test failed. Nice.&lt;/p>
&lt;p>&lt;img alt="Infinitest failure icon" src="https://www.nickebbitt.com/blog/2017/06/26/continuous-unit-testing-with-java-infinitest/infinitest-failure-icon.png">&lt;/p>
&lt;h3 id="filtering-tests">Filtering tests&lt;/h3>
&lt;p>In many applications, there will be a mix of tests of different styles such as unit, integration and load. In general, it is unlikely you will want to automatically want run integration or load tests every time a file changes that they depend on due to them being slow running or requiring more complex external setup.&lt;/p>
&lt;p>&lt;em>Infinitest&lt;/em> provides the ability to filter tests for this exact reason. Simply adding an &lt;code>infinitest.filters&lt;/code> file to the root of your project and adding regular expressions (one per line) will filter out the tests that match.&lt;/p>
&lt;p>A simple example to filter out integration tests, assuming they have names such as &lt;code>MyAppIT&lt;/code>, is to create a file with the following content:&lt;/p>
&lt;p>&lt;code>.*IT&lt;/code>&lt;/p>
&lt;p>Filters can also be applied to packages using a regex such as:&lt;/p>
&lt;p>&lt;code>com\.nickebbitt\.it\..*&lt;/code>&lt;/p>
&lt;p>If using &lt;a href="http://testng.org/doc/">TestNG&lt;/a> rather than &lt;a href="http://junit.org/junit4/">JUnit&lt;/a> there is also the option to filter tests using TestNG groups.&lt;/p>
&lt;hr>
&lt;p>To summarise, if you are following a TDD approach and are looking to shorten the cycles, or even just writing unit tests and want quicker feedback, then following a continuous unit testing approach can help achieve this.&lt;/p>
&lt;p>If you&amp;rsquo;re developing in Java and using IntelliJ, or Eclipse, then &lt;em>Infinitest&lt;/em> is your friend. It&amp;rsquo;s simple to setup and provides exactly the features you need to start continuously unit testing on your projects.&lt;/p></content></item><item><title>Looking forward to JUnit 5</title><link>https://www.nickebbitt.com/blog/2017/04/16/looking-forward-to-junit-5/</link><pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/04/16/looking-forward-to-junit-5/</guid><description>In this post I explore some of the features I&amp;rsquo;m looking forward to in the upcoming JUnit 5 release.
First, a bit of background&amp;hellip;
The process to create a new version of JUnit kicked off around the middle of 2015 when a crowdfunding campaign was started. At this point the initiative was referred to as JUnit Lambda. One of the drivers for this was the release of Java 8 that provided a number of language features, such as Streams and Lambdas, offering new ways for the test framework to be implemented and tests to be written.</description><content>&lt;p>In this post I explore some of the features I&amp;rsquo;m looking forward to in the upcoming JUnit 5 release.&lt;/p>
&lt;p>First, a bit of background&amp;hellip;&lt;/p>
&lt;p>The process to create a new version of JUnit kicked off around the middle of 2015 when a &lt;a href="https://github.com/junit-team/junit5/wiki/Crowdfunding-Campaign">crowdfunding campaign&lt;/a> was started. At this point the initiative was referred to as &lt;strong>JUnit Lambda&lt;/strong>. One of the drivers for this was the release of Java 8 that provided a number of language features, such as Streams and Lambdas, offering new ways for the test framework to be implemented and tests to be written. The project was later renamed JUnit 5 and the &lt;a href="https://github.com/junit-team/junit5/wiki/Roadmap">roadmap&lt;/a> for the project leading up to the present day can be found on their GitHub page.&lt;/p>
&lt;p>JUnit 5 is not yet complete however the GA release is currently on schedule to be available during Q3 2017. The latest milestone, &lt;a href="http://junit.org/junit5/docs/current/user-guide/#release-notes-5.0.0-m4">5.0.0 M4&lt;/a>, was released on 1st April 2017.&lt;/p>
&lt;p>Anyway, here are my thoughts on some of the new features that will be available later this year&amp;hellip;&lt;/p>
&lt;h2 id="display-names">Display Names&lt;/h2>
&lt;p>How often do you write a test case for which the name is quite long due to you wanting to clearly describe the intentions of the test. Depending on your coding style, you may use camel case that can &lt;code>resultInReallyLongAndDifficultToReadTestNames&lt;/code>.&lt;/p>
&lt;p>The new &lt;a href="http://junit.org/junit5/docs/current/user-guide/#writing-tests-display-names">&lt;code>@DisplayName&lt;/code>&lt;/a> annotation provides a solution to this. While functionally this change isn&amp;rsquo;t really offering anything too exciting, I think the clarity it adds to your tests, particularly when viewing them in the test results panel of your IDE, is really valuable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The display name annotation provides a...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DisplayNames&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;way of producing more readable test names&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">test1&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">ratherThanSomethingHarderToReadLikeThis&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The improvement of the new style test names over the old is evident when viewing test results in the IDE.&lt;/p>
&lt;p>&lt;img alt="Display Names IDE Integration" src="https://www.nickebbitt.com/blog/2017/04/16/looking-forward-to-junit-5/display-names-ide.png">&lt;/p>
&lt;h2 id="nested-tests">Nested Tests&lt;/h2>
&lt;p>The &lt;a href="http://junit.org/junit5/docs/current/user-guide/#writing-tests-nested">&lt;code>@Nested&lt;/code>&lt;/a> annotation provides us with a new way of organising tests. When applying the annotation to a non-static inner class we are now able to create one or more logical groups of test cases within a single outer test class. The nesting can be applied to an arbitrary depth providing great flexibility.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;High-level User Story&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NestedTests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Nested&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Simple Scenario&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FeatureOne&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Test One&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testOne&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Test Two&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testTwo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Nested&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;More Complex Scenario&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FeatureTwo&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Test One&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testOne&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Nested&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Nested Scenario&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SubFeature&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@DisplayName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Test One&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testOne&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This works great with IDE integration too to further improve test organisation and the readability of the results&amp;hellip;&lt;/p>
&lt;p>&lt;img alt="Nested Tests IDE Integration" src="https://www.nickebbitt.com/blog/2017/04/16/looking-forward-to-junit-5/nested-tests-ide.png">&lt;/p>
&lt;h2 id="tagging--filtering">Tagging &amp;amp; Filtering&lt;/h2>
&lt;p>The &lt;code>@Tag&lt;/code> annotation provides us with a nice way of categorising tests. An obvious use-case would be to categorise tests based on the style of test e.g. integration, system, end-to-end, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TaggedTests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Tag&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;integration&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">integrationTest&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Tag&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;system&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">systemTest&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Tag&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;end-to-end&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">endToEndTest&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, for example, the different types of tests could be run as required at the relevant stages of a delivery pipeline.&lt;/p>
&lt;h2 id="grouped-assertions">Grouped assertions&lt;/h2>
&lt;p>The ability to now group assertions looks a really useful new feature. In JUnit 4, if a test had multiple assertions then execution would halt after the first failure.&lt;/p>
&lt;pre tabindex="0">&lt;code>@Test
void ungroupedAssertions() {
assertTrue(false, &amp;#34;this test fails here&amp;#34;);
assertTrue(true, &amp;#34;so we never perform this assertion&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;p>Whereas in JUnit 5, every assertion will be performed and the results provided for each of them.&lt;/p>
&lt;pre tabindex="0">&lt;code>@Test
void groupedAssertions() {
assertAll(
&amp;#34;all of these assertions&amp;#34;,
() -&amp;gt; assertTrue(true, &amp;#34;are performed&amp;#34;),
() -&amp;gt; assertTrue(false, &amp;#34;even if the&amp;#34;),
() -&amp;gt; assertTrue(false, &amp;#34;previous one failed&amp;#34;)
);
}
&lt;/code>&lt;/pre>&lt;p>When viewing the test failure for a grouped assertion in the IDE (IntelliJ) we see that the test failed and closer inspection of the output / stack trace shows the detail related to which assertions failed.&lt;/p>
&lt;p>&lt;img alt="Grouped assertions IDE" src="https://www.nickebbitt.com/blog/2017/04/16/looking-forward-to-junit-5/grouped-assertions-ide.png">&lt;/p>
&lt;p>It would be nice to see the IDE integration enhanced further to present the individual assertion failures more clearly in a similar way to the overall test case failures. I had to scroll a bit to find the summary of the assertions that failed.&lt;/p>
&lt;h2 id="parameterised-tests">Parameterised Tests&lt;/h2>
&lt;p>Now parameterised tests aren&amp;rsquo;t a new thing - we could write them in JUnit 4 with the help of the &lt;a href="https://github.com/junit-team/junit4/wiki/parameterized-tests">&lt;code>Parameterized.class&lt;/code>&lt;/a> test runner. Providing the parameters was ugly though&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Collection&lt;span style="color:#f92672">&amp;lt;&lt;/span>Object&lt;span style="color:#f92672">[]&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> Arrays.&lt;span style="color:#a6e22e">asList&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> Object&lt;span style="color:#f92672">[][]&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This feature has been revisited and a completely new way of writing parameterised tests has been provided. With the use of the &lt;code>@ParameterizedTest&lt;/code> and &lt;code>@ValueSource&lt;/code> annotations we have a simple but very powerful way of providing parameters to a test method.&lt;/p>
&lt;p>Values can be provided in-line similarly to the example above but with much simplified syntax.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ParameterizedTest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ValueSource&lt;/span>(ints &lt;span style="color:#f92672">=&lt;/span> {1, 2, 3})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testWithParams&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> param) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assertTrue(param &lt;span style="color:#f92672">&amp;lt;&lt;/span> 3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As can be seen in the following screen shot, three tests are executed of which one fails.&lt;/p>
&lt;p>&lt;img alt="Parameterised Tests IDE" src="https://www.nickebbitt.com/blog/2017/04/16/looking-forward-to-junit-5/parameterised-tests-ide.png">&lt;/p>
&lt;p>As well as &lt;code>@ValueSource&lt;/code>, other options for providing test inputs as parameters are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@EnumSource&lt;/code> - a set of Enum constants.&lt;/li>
&lt;li>&lt;code>@MethodSource&lt;/code> - the result of a method in the form of a &lt;code>Stream&lt;/code>, &lt;code>Iterable&lt;/code>, &lt;code>Iterator&lt;/code> or an array of arguments.&lt;/li>
&lt;li>&lt;code>@CsvSource&lt;/code> - a list of comma separated values.&lt;/li>
&lt;li>&lt;code>@CsvFileSource&lt;/code> - a CSV file from the classpath.&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>@CsvFileSource&lt;/code> stands out as a really convenient way of driving large volumes of test data through a test case.&lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>This post only scratches the surface of what&amp;rsquo;s coming in JUnit 5.&lt;/p>
&lt;p>One key area I&amp;rsquo;ve not covered at all that looks intriguing is the ability to write &lt;a href="http://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests">dynamic tests&lt;/a>. I&amp;rsquo;m looking forward to seeing how this is used in practice.&lt;/p>
&lt;p>The new &lt;a href="http://junit.org/junit5/docs/current/user-guide/#extensions">extension model&lt;/a> also looks like it will provide a simple and flexible new way for JUnit to be extended, improving on the previous options of &lt;code>Runner&lt;/code>, &lt;code>@Rule&lt;/code> and &lt;code>@ClassRule&lt;/code>.&lt;/p>
&lt;p>I&amp;rsquo;m looking forward to the making use of all of the great new features when JUnit 5 is released.&lt;/p>
&lt;hr>
&lt;p>All code from this post is available on &lt;a href="https://github.com/nickebbitt/junit5-examples">GitHub&lt;/a>.&lt;/p></content></item><item><title>Asynchronous web service using Completable Future</title><link>https://www.nickebbitt.com/blog/2017/03/22/asynchronous-web-service-using-completable-future/</link><pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/03/22/asynchronous-web-service-using-completable-future/</guid><description>Until recently I&amp;rsquo;ve not spent a lot time looking into the enhancements provided in java.util.concurrent as part of the Java 8 release. This has been predominantly due to the fact I&amp;rsquo;ve been using the Akka toolkit to handle any concurrency concerns within the Java app I&amp;rsquo;ve been working on.
The app in question uses the Spring framework and exposes a number of &amp;ldquo;RESTful&amp;rdquo; HTTP endpoints implemented using a Spring @RestController and the DeferredResult class.</description><content>&lt;p>Until recently I&amp;rsquo;ve not spent a lot time looking into the enhancements provided in
&lt;code>java.util.concurrent&lt;/code> as part of the Java 8 release. This has been predominantly due to
the fact I&amp;rsquo;ve been using the &lt;a href="http://akka.io/">Akka&lt;/a> toolkit to handle any concurrency
concerns within the Java app I&amp;rsquo;ve been working on.&lt;/p>
&lt;p>The app in question uses the &lt;a href="https://projects.spring.io/spring-framework/">Spring framework&lt;/a> and exposes a number of &amp;ldquo;RESTful&amp;rdquo; HTTP endpoints implemented using a Spring &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html">&lt;code>@RestController&lt;/code>&lt;/a> and the &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html">&lt;code>DeferredResult&lt;/code>&lt;/a> class. This provides a simple way to create an asynchronous service where a request can be handled concurrently on a thread of implementers choice. In our case things then get slightly more complicated as, rather than submit the request to a thread pool or the like for processing, we forward the &lt;code>DeferredResult&lt;/code> to an actor. A result is provided for the &lt;code>DeferredResult&lt;/code> at some point in the future by an actor that uses a thread managed by the actor system.&lt;/p>
&lt;p>This approach works fine but the level of complexity in the implementation isn&amp;rsquo;t desirable for a couple of reasons. One is that the bridge into the actor system makes it more difficult to test. There is also the additional maintenance overhead caused by the code being more difficult to understand and reason about at the seams between the actor/non-actor code.&lt;/p>
&lt;p>Then I saw the following tweet (since removed) from Jamie Allen (former employee of &lt;a href="https://www.lightbend.com/">Lightbend&lt;/a>, stewards of Akka)&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>Really, if you’re using Akka purely for simpler local concurrency, you’re doing it wrong. That’s for Futures; much more composable.&lt;/p>
&lt;/blockquote>
&lt;p>&amp;hellip;and it got me thinking more about the approach we had used and whether the standard concurrency utilities available in Java could provide a much simpler alternative to our current design based on &lt;code>DeferredResult&lt;/code> and Akka.&lt;/p>
&lt;h3 id="a-bit-about-completablefuture">A bit about CompletableFuture&lt;/h3>
&lt;p>One of the enhancements to the standard concurrency utilities that arrived in Java 8 comes in the form of the
&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">&lt;code>CompletableFuture&lt;/code>&lt;/a>
class. &lt;code>CompletableFuture&lt;/code> implements the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html">&lt;code>Future&lt;/code>&lt;/a>
interface (available since Java 5) that provides the result of an asynchronous computation. It also implements the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html">&lt;code>CompletionStage&lt;/code>&lt;/a>
interface that defines the contract for &amp;ldquo;&amp;hellip;a stage of possibly asynchronous computation, that
performs an action or computes a value when another &lt;code>CompletionStage&lt;/code> completes.&amp;rdquo;&lt;/p>
&lt;blockquote>
&lt;p>In short, the &lt;code>CompletableFuture&lt;/code> class provides us with a way to compose, combine and execute
asynchronous computation steps.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;m not going to go into detail about &lt;code>CompletableFuture&lt;/code> however the following video from Tomasz Nurkiewicz provides a great primer for understanding what it offers.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-MBPQ7NIL_Y?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
>&lt;/iframe>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;p>What I&amp;rsquo;m specifically interested in is how we can use &lt;code>CompletableFuture&lt;/code> in combination with a Spring &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html">&lt;code>@RestController&lt;/code>&lt;/a> to implement HTTP endpoints that handle requests asynchronously.&lt;/p>
&lt;p>Given a method that simulates some time consuming computation&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> String &lt;span style="color:#a6e22e">processRequest&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Start processing request&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Thread.&lt;span style="color:#a6e22e">sleep&lt;/span>(5000);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> (InterruptedException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e.&lt;span style="color:#a6e22e">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Completed processing request&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> RESULT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;the following examples demonstrate a few different approaches to handling requests.&lt;/p>
&lt;h3 id="a-synchronous-example">A synchronous example&lt;/h3>
&lt;p>Here we have a HTTP endpoint that the handles a request synchronously.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/sync&amp;#34;&lt;/span>, method &lt;span style="color:#f92672">=&lt;/span> RequestMethod.&lt;span style="color:#a6e22e">GET&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getValueSync&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Request received&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> processRequest();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This generates the following log output&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>21:21:19.204 &lt;span style="color:#f92672">[&lt;/span> main&lt;span style="color:#f92672">]&lt;/span> Before request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:19.347 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-1&lt;span style="color:#f92672">]&lt;/span> Request received
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:19.347 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-1&lt;span style="color:#f92672">]&lt;/span> Start processing request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:24.351 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-1&lt;span style="color:#f92672">]&lt;/span> Completed processing request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:24.374 &lt;span style="color:#f92672">[&lt;/span> main&lt;span style="color:#f92672">]&lt;/span> After request
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The key thing to note here is that all processing occurs on the same HTTP thread (&lt;code>http-nio-auto-1-exec-1&lt;/code>). This means that for the duration of the request the HTTP thread is blocked and unavailable to serve other requests made to the system. This is undesirable due to the potential for the servlet container&amp;rsquo;s thread pool to be exhausted when an app is under heavy load thus impacting an apps scalability.&lt;/p>
&lt;h3 id="an-asynchronous-example-using-deferredresult">An asynchronous example using DeferredResult&lt;/h3>
&lt;p>Here we have a HTTP endpoint that handles a request asynchronously via Spring&amp;rsquo;s &lt;code>DeferredResult&lt;/code>. As mentioned earlier, this has been my go to approach for implementing asynchronous behaviour in a RESTful HTTP service.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/asyncDeferred&amp;#34;&lt;/span>, method &lt;span style="color:#f92672">=&lt;/span> RequestMethod.&lt;span style="color:#a6e22e">GET&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> DeferredResult&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getValueAsyncUsingDeferredResult&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Request received&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DeferredResult&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> deferredResult &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DeferredResult&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ForkJoinPool.&lt;span style="color:#a6e22e">commonPool&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">submit&lt;/span>(() &lt;span style="color:#f92672">-&amp;gt;&lt;/span> deferredResult.&lt;span style="color:#a6e22e">setResult&lt;/span>(processRequest()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Servlet thread released&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> deferredResult;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This generates the following log output&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>21:21:24.418 &lt;span style="color:#f92672">[&lt;/span> main&lt;span style="color:#f92672">]&lt;/span> Before request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:24.421 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-2&lt;span style="color:#f92672">]&lt;/span> Request received
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:24.427 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-2&lt;span style="color:#f92672">]&lt;/span> Servlet thread released
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:24.427 &lt;span style="color:#f92672">[&lt;/span>ForkJoinPool.commonPool-worker-1&lt;span style="color:#f92672">]&lt;/span> Start processing request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:29.429 &lt;span style="color:#f92672">[&lt;/span>ForkJoinPool.commonPool-worker-1&lt;span style="color:#f92672">]&lt;/span> Completed processing request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:29.448 &lt;span style="color:#f92672">[&lt;/span> main&lt;span style="color:#f92672">]&lt;/span> After request
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The key difference to note here is that, unlike the synchronous endpoint, the request processing occurs on a different thread (&lt;code>ForkJoinPool.commonPool-worker-1&lt;/code>). The HTTP thread (&lt;code>http-nio-auto-1-exec-2&lt;/code>) is released pretty much immediately making it available to serve additional requests. The actual request processing is performed at some later point in time on a different thread. For demonstration purposes I&amp;rsquo;ve use the standard &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">&lt;code>ForkJoinPool&lt;/code>&lt;/a> thread pool however in practice you would likely create and configure a suitable thread pool based on your use-case.&lt;/p>
&lt;h3 id="an-asynchronous-example-using-completablefuture">An asynchronous example using CompletableFuture&lt;/h3>
&lt;p>Finally we have a HTTP endpoint that handles a request asynchronously using Java 8&amp;rsquo;s &lt;code>CompletableFuture&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/asyncCompletable&amp;#34;&lt;/span>, method &lt;span style="color:#f92672">=&lt;/span> RequestMethod.&lt;span style="color:#a6e22e">GET&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> CompletableFuture&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getValueAsyncUsingCompletableFuture&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Request received&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CompletableFuture&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> completableFuture &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CompletableFuture.&lt;span style="color:#a6e22e">supplyAsync&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>::processRequest);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Servlet thread released&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> completableFuture;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This generates the following log output&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>21:21:29.453 &lt;span style="color:#f92672">[&lt;/span> main&lt;span style="color:#f92672">]&lt;/span> Before request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:29.456 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-4&lt;span style="color:#f92672">]&lt;/span> Request received
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:29.458 &lt;span style="color:#f92672">[&lt;/span>http-nio-auto-1-exec-4&lt;span style="color:#f92672">]&lt;/span> Servlet thread released
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:29.458 &lt;span style="color:#f92672">[&lt;/span>ForkJoinPool.commonPool-worker-1&lt;span style="color:#f92672">]&lt;/span> Start processing request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:34.463 &lt;span style="color:#f92672">[&lt;/span>ForkJoinPool.commonPool-worker-1&lt;span style="color:#f92672">]&lt;/span> Completed processing request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>21:21:34.468 &lt;span style="color:#f92672">[&lt;/span> main&lt;span style="color:#f92672">]&lt;/span> After request
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is pretty much identical to the &lt;code>DeferredResult&lt;/code> example in that the request processing occurs on a different thread. It&amp;rsquo;s worth noting that this example also uses the &lt;code>ForkJoinPool&lt;/code> due it being the default when no explicit thread pool is provided to the &lt;code>supplyAsync&lt;/code> method.&lt;/p>
&lt;p>&lt;code>CompletableFuture&lt;/code> has the advantage over &lt;code>DeferredResult&lt;/code> due to the various composable methods that it provides. This allows for more complex chains of processing to be defined that are completely asynchronous.&lt;/p>
&lt;p>The following example shows a simple chain of asynchronous processing&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/asyncCompletableComposed&amp;#34;&lt;/span>, method &lt;span style="color:#f92672">=&lt;/span> RequestMethod.&lt;span style="color:#a6e22e">GET&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> CompletableFuture&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getValueAsyncUsingCompletableFutureComposed&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> CompletableFuture
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">supplyAsync&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>::processRequest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">thenApplyAsync&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>::reverseString);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="in-summary">In summary&lt;/h2>
&lt;p>The examples in this post demonstrate a couple of different approaches to creating an asynchronous HTTP endpoint.&lt;/p>
&lt;p>The simplicity of &lt;code>CompletableFuture&lt;/code> makes it a no-brainer to use in place of &lt;code>DeferredResult&lt;/code> due to the additional power and flexibility that comes with it.&lt;/p>
&lt;p>The next step to investigate further how &lt;code>CompletableFuture&lt;/code> can integrate with, if not replace, some of the actor based functionality currently in use.&lt;/p>
&lt;hr>
&lt;p>All code from this post is available in &lt;a href="https://github.com/nickebbitt/rest-async-completable-future">GitHub&lt;/a>.&lt;/p></content></item><item><title>TDD, Sudoku and a mob!</title><link>https://www.nickebbitt.com/blog/2017/02/13/tdd-sudoku-and-a-mob/</link><pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/02/13/tdd-sudoku-and-a-mob/</guid><description>Last week I attended XP Manchester where the meetup was advertised as TDD Sudoku #1. The inspiration for this session was provided by a similar exercise carried out by Ron Jeffries around 10 years ago. The objective was to follow a similar process to create a &amp;ldquo;Sudoku Solver&amp;rdquo; with the aim of understanding the possible reasons why Ron&amp;rsquo;s attempt was ultimately unsuccessful.
I&amp;rsquo;ve never played Sudoku and have only read about Test-driven Development (TDD) via various sources as well as being half way through the GOOS book.</description><content>&lt;p>Last week I attended &lt;a href="https://xpmanchester.wordpress.com/">XP Manchester&lt;/a> where the meetup was advertised as &lt;a href="https://xpmanchester.wordpress.com/2017/02/02/xpman-80-xpmanchester-tdds-sudoku-1/">TDD Sudoku #1&lt;/a>. The inspiration for this session was provided by a similar exercise carried out by &lt;a href="http://ronjeffries.com/xprog/articles/oksudoku/">Ron Jeffries around 10 years ago&lt;/a>. The objective was to follow a similar process to create a &amp;ldquo;Sudoku Solver&amp;rdquo; with the aim of understanding the possible reasons why Ron&amp;rsquo;s attempt was ultimately unsuccessful.&lt;/p>
&lt;p>I&amp;rsquo;ve never played &lt;a href="https://en.wikipedia.org/wiki/Sudoku">Sudoku&lt;/a> and have only read about &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-driven Development (TDD)&lt;/a> via various sources as well as being half way through the &lt;a href="http://www.growing-object-oriented-software.com/">GOOS&lt;/a> book. I was keen to learn more about TTD and this looked like a good opportunity to.&lt;/p>
&lt;p>What I hadn&amp;rsquo;t realised was that we would be using the &lt;a href="https://en.wikipedia.org/wiki/Mob_programming">mob programming&lt;/a> format with an element of rotation to allow all attendees (around 20 or so) to get involved. I was already aware of mob programming following &lt;a href="https://twitter.com/WoodyZuill">Woody Zuill&amp;rsquo;s&lt;/a> great talk at the Coop last year so was interested to experience this also.&lt;/p>
&lt;p>So this was set to be a great chance to learn about, and practice, some new skills.&lt;/p>
&lt;p>So what did I learn?&lt;/p>
&lt;p>Sudoku looks like a fun little game, not sure why I&amp;rsquo;ve never bothered to play properly it but aim to sometime soon.&lt;/p>
&lt;p>TDD is conceptually straight forward but put 15+ people working on a problem together and various styles and opinions create an interesting dynamic. I didn&amp;rsquo;t really learn anything new about TDD. Like most things people have their preferred ways of approaching a problem and this was evident as we initially struggled to gain any momentum due to conflicting views.&lt;/p>
&lt;p>A mob of 15+ programmers with varying opinions, some on less important factors such as coding style, can easily result in a less than productive overall process. The large number will no doubt be a factor here but possibly someone controlling the mob and providing more direction to keep focus on the problem at hand would be beneficial. We did waste a lot of time on &amp;ldquo;tabs vs spaces&amp;rdquo; type discussion.&lt;/p>
&lt;p>So while the first session wasn&amp;rsquo;t hugely productive in terms of creating a &amp;ldquo;Sudoku Solver&amp;rdquo; it was definitely an interesting process. I&amp;rsquo;m looking forward to the next session where we&amp;rsquo;ll look to progress further with hopefully more discipline.&lt;/p>
&lt;p>Finally, I just stumbled on &lt;a href="https://silkandspinach.net/2017/02/10/its-bikesheds-all-the-way-down/">a post&lt;/a> from Kevin Rutherford who was also in attendance. Some useful additional insights.&lt;/p></content></item><item><title>A simplistic approach to managing app config</title><link>https://www.nickebbitt.com/blog/2017/02/02/a-simplistic-approach-to-managing-app-config/</link><pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/02/02/a-simplistic-approach-to-managing-app-config/</guid><description>I&amp;rsquo;ve recently been involved in the transformation of the processes used to deliver change from being heavily manual, time consuming and error prone to fully automated, efficient and reliable.
To drive the new automated process without human interaction, other than maybe clicking a single button, we knew that we would need a way of managing application configuration that allowed the process to simply pick up the config values during its execution.</description><content>&lt;p>I&amp;rsquo;ve recently been involved in the transformation of the processes used to deliver change from being heavily manual, time consuming and error prone to fully automated, efficient and reliable.&lt;/p>
&lt;p>To drive the new automated process without human interaction, other than maybe clicking a single button, we knew that we would need a way of managing application configuration that allowed the process to simply pick up the config values during its execution. Our automated deployment process was driven by bash scripts so compatibility with bash was desirable.&lt;/p>
&lt;p>There were two types of config we had to deal with:&lt;/p>
&lt;ul>
&lt;li>Deployment - which components go where etc.&lt;/li>
&lt;li>Application - runtime parameters e.g. JDBC connection params&lt;/li>
&lt;/ul>
&lt;p>An additional complication to the management of config was due to the nature of our business with us hosting multiple deployments of the same product for different customers, up to around 20. This meant that the following dimensions had to be considered when deciding how to manage the config params:&lt;/p>
&lt;ul>
&lt;li>Product&lt;/li>
&lt;li>Customer&lt;/li>
&lt;li>Environment e.g. development (DEV), integration testing (IT), user acceptance testing (UAT), production (PROD)&lt;/li>
&lt;li>Version&lt;/li>
&lt;/ul>
&lt;p>We also decided that it was important to have an audit trail of changes to the config to help with the analysis and debug of any issues that may arise.&lt;/p>
&lt;p>This would all be tied together through a Jenkins job where any preparation of the config could be performed and an artifact created to ease consumption by other Jenkins jobs.&lt;/p>
&lt;p>So to summarise, our requirements were:&lt;/p>
&lt;ul>
&lt;li>Compatibility with automated deployment process i.e. consumable by shell scripts (Bash)&lt;/li>
&lt;li>Support multiple customers, products, environments and versions&lt;/li>
&lt;li>Audit of changes to config&lt;/li>
&lt;/ul>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>The only tools you&amp;rsquo;ll need for this solution are a shell environment (i.e. Bash), your favourite file editor and Git.&lt;/p>
&lt;h3 id="shell-compatibility">Shell compatibility&lt;/h3>
&lt;p>Starting with the first requirement, the need for the config to be consumable by shell scripts, we opted to define a set of key/value pairs in the form of Linux environment variables in a shell script called &lt;code>params.sh&lt;/code>, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>MY_PARAM1&lt;span style="color:#f92672">=&lt;/span>value1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MY_PARAM2&lt;span style="color:#f92672">=&lt;/span>value2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This provides a very simple way to inject parameter values into the process performing the application deployment. This could be via a Jenkins job or simply by sourcing the params file into another shell script e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>source params.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="support-for-multiple-customers-products-environments-and-versions">Support for multiple customers, products, environments and versions&lt;/h3>
&lt;p>Addressing the second requirement, to support the provision of config files for multiple customers, products, environments and versions, we had to find a way of organising the config is such a way to make it easily accessible.&lt;/p>
&lt;p>The options boiled down to preferring the config to be accessible first by customer then product or by product then customer. To illustrate this the directory structures for storing the config of each option would be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Customer -&amp;gt; Product -&amp;gt; Environment -&amp;gt; Version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CUST1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>../PRODUCT1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>..../UAT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....../1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....../1.1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......../params.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>..../PROD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....../1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......../params.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>../PRODUCT2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CUST2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Product -&amp;gt; Customer -&amp;gt; Environment -&amp;gt; Version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PRODUCT1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>../CUST1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>..../UAT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....../1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....../1.1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......../params.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>..../PROD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....../1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>......../params.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>../CUST2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PRODUCT2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To be honest it was six of one, half a dozen of the other as to which structure would be better. We went with the first option, customer then product, mainly due to the fact that then for a single customer we would have all of their config grouped together. As mentioned though there are arguments just as strong the other way.&lt;/p>
&lt;p>So now we have the ability to source a parameter file into a Bash script that will be held in a directory structure such as &lt;code>./CUST1/PRODUCT1/UAT/1.1.0/params.sh&lt;/code>.&lt;/p>
&lt;h3 id="auditing">Auditing&lt;/h3>
&lt;p>Finally, to meet the requirement of having an audit log of all config related changes we simply host the above file structure and parameter files in a Git repo.&lt;/p>
&lt;p>Whenever we need create or update create a new Git commit and push the change to the central Git repo. A Jenkins job will then clone the repo and create an artifact (i.e. tar file) containing all config that can then be consumed by other processes (i.e. other Jenkins jobs).&lt;/p>
&lt;p>As we are using Git we also include an audit log in the artifact to make it easier to reference the changes made to the config wherever they are being used. This is achieved with via the &lt;code>git log&lt;/code> command with some special formatting:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git log --pretty&lt;span style="color:#f92672">=&lt;/span>format:&lt;span style="color:#e6db74">&amp;#34;%h - %an (%ae), %ad : %s&amp;#34;&lt;/span> &amp;gt; commit.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This produces output such as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>e3e0728 - Nick Ebbitt &lt;span style="color:#f92672">(&lt;/span>someone@gmail.com&lt;span style="color:#f92672">)&lt;/span>, Mon Jan &lt;span style="color:#ae81ff">30&lt;/span> 20:34:11 &lt;span style="color:#ae81ff">2017&lt;/span> +0000 : Fix grammatical error
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>81826b4 - Nick Ebbitt &lt;span style="color:#f92672">(&lt;/span>someone@gmail.com&lt;span style="color:#f92672">)&lt;/span>, Wed Jan &lt;span style="color:#ae81ff">25&lt;/span> 13:58:48 &lt;span style="color:#ae81ff">2017&lt;/span> +0000 : Reword introduction
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>af7a186 - Nick Ebbitt &lt;span style="color:#f92672">(&lt;/span>someone@gmail.com&lt;span style="color:#f92672">)&lt;/span>, Wed Jan &lt;span style="color:#ae81ff">4&lt;/span> 21:03:44 &lt;span style="color:#ae81ff">2017&lt;/span> +0000 : Add Amazon Linux to tech skills
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>167244c - Nick Ebbitt &lt;span style="color:#f92672">(&lt;/span>someone@gmail.com&lt;span style="color:#f92672">)&lt;/span>, Wed Jan &lt;span style="color:#ae81ff">4&lt;/span> 10:04:22 &lt;span style="color:#ae81ff">2017&lt;/span> +0000 : Update footer to &lt;span style="color:#ae81ff">2017&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>61ef2f7 - Nick Ebbitt &lt;span style="color:#f92672">(&lt;/span>someone@gmail.com&lt;span style="color:#f92672">)&lt;/span>, Tue Jan &lt;span style="color:#ae81ff">3&lt;/span> 21:06:32 &lt;span style="color:#ae81ff">2017&lt;/span> +0000 : Update photo on main page
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5fa1a83 - Nick Ebbitt &lt;span style="color:#f92672">(&lt;/span>someone@gmail.com&lt;span style="color:#f92672">)&lt;/span>, Tue Jan &lt;span style="color:#ae81ff">3&lt;/span> 19:19:07 &lt;span style="color:#ae81ff">2017&lt;/span> +0000 : Update technical skills on CV
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="final-thoughts">Final thoughts&amp;hellip;&lt;/h2>
&lt;p>So that&amp;rsquo;s it. As in the title, this is a very simplistic approach that may not stand the test of the time but it works quite well for our basic needs right now.&lt;/p>
&lt;p>Currently this solution doesn&amp;rsquo;t provide a way for app components to discover their config or receive config changes at runtime however without too much effort this solution could be reworked to play nicely with &lt;a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config&lt;/a> or an equivalent tool.&lt;/p>
&lt;p>The solution could also benefit from some kind inheritance model to reduce duplication. There are undoubtedly a common set of defaults values that rarely change across customers.&lt;/p>
&lt;p>Arguably we could also do away with the version dimension as we will likely always be delivering the latest version for which the config must be compatible. We would therefore have a single set of config params for each customer / product / environment further reducing duplication.&lt;/p></content></item><item><title>Making a mockery of web services</title><link>https://www.nickebbitt.com/blog/2017/01/01/making-a-mockery-of-web-services/</link><pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2017/01/01/making-a-mockery-of-web-services/</guid><description>In October 2016 I gave my first public talk at the Manchester Java Community (MJC). The talk took the form of a 15 minute lightning talk and this blog provides the detail of what I discussed to support the slides.
Abstract With the help of WireMock we will explore how to create reliable and repeatable end-to-end tests for an application that depends on an external web service or HTTP-based API.</description><content>&lt;p>In October 2016 I gave my first public talk at the Manchester Java Community (MJC). The talk took the form of a 15 minute lightning talk and this blog provides the detail of what I discussed to support the &lt;a href="https://speakerdeck.com/nickebbitt/making-a-mockery-of-web-services">slides&lt;/a>.&lt;/p>
&lt;h1 id="abstract">Abstract&lt;/h1>
&lt;p>With the help of &lt;a href="http://wiremock.org/">WireMock&lt;/a> we will explore how to create reliable and repeatable end-to-end tests for an application that depends on an external web service or HTTP-based API.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Until around 5 years ago all my experience was heavily focused in the client/server world of Oracle RDBMS and Oracle Forms. I then started working on web applications that followed a more three tiered architecture. These applications have generally followed the same pattern, a database (usually Oracle) exposed via a HTTP-based web service that is consumed by a HTML/JavaScript based user interface.&lt;/p>
&lt;p>The most recent system of this nature that I have worked on was a mobile platform to provide integration between mobile devices and a &amp;ldquo;backend&amp;rdquo; HTTP-based web service. The mobile platform was cloud based exposing HTTP endpoints to be consumed by the mobile clients.&lt;/p>
&lt;p>We chose to architect the system to allow us to follow a Continuous Delivery (CD) approach using blue/green deployments. To allow us to deliver the system this way it was essential that we could run automated acceptance tests to provide us with the confidence that we had a system that was always releasable.&lt;/p>
&lt;p>This blog post explores the tools &amp;amp; techniques used to approach this problem.&lt;/p>
&lt;h2 id="define-mock">Define: Mock&lt;/h2>
&lt;p>First off we&amp;rsquo;ll cover some of the core ideas related to testing.&lt;/p>
&lt;p>According to &lt;a href="https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=define%3A%20mock">Google&lt;/a>, to &lt;em>mock&lt;/em> something is to&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;make a replica or imitation of something.&lt;/p>
&lt;/blockquote>
&lt;p>This definition sets us on the right path to understanding why we may want to mock something.&lt;/p>
&lt;p>In relation to software engineering and specifically object oriented (OO) programming, &lt;a href="http://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&lt;/a> suggest that mocks are&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip;special case objects that mimic real objects for testing.&lt;/p>
&lt;/blockquote>
&lt;p>I think it&amp;rsquo;s important to consider mocks more generally than just in applied to objects in the OO sense. A mock can be used for various types internal or external dependencies of a software application given the right tools &amp;amp; techniques for the job.&lt;/p>
&lt;h3 id="why-use-mocks">Why use mocks?&lt;/h3>
&lt;p>Mocks help us to write tests that are deterministic and repeatable. They provide a way of controlling the behaviour of dependencies that the object (or system) under test is collaborating or interacting with.&lt;/p>
&lt;p>This control allows us to model the various scenarios or use-cases necessary to prove that the software meets the acceptance criteria.&lt;/p>
&lt;h3 id="when-to-mock">When to mock?&lt;/h3>
&lt;p>It is likely that during the development of an application you will be writing different types of tests with the intention of increasing the confidence that the changes you are developing are correct.&lt;/p>
&lt;p>&lt;img alt="Testing Pyramid" src="https://www.nickebbitt.com/blog/2017/01/01/making-a-mockery-of-web-services/testing-pyramid.png">&lt;/p>
&lt;p>This will usually start at the lowest level with unit tests in which you’ll be aiming to test a single unit of your application such as an instance of a single class. If the object you are testing collaborates with another object then using a design pattern such as &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection">dependency injection&lt;/a> and a mocking framework (e.g. &lt;a href="http://site.mockito.org/">Mockito&lt;/a>) you will be able to inject a mock of the collaborator into the unit you are testing.&lt;/p>
&lt;p>Similarly, if you are testing at a higher up the pyramid and looking to prove the correctness of a subsystem or the application as a whole then it may be desirable to mock the application’s external dependencies such as a database, a queue, or a web service.&lt;/p>
&lt;p>It’s important to note I believe mocks are very useful but are not a replacement for testing against the “real” thing. This is still necessary, whether automated or manual, and should definitely be part of an overall testing strategy.&lt;/p>
&lt;h3 id="mocking-web-services">Mocking web services&lt;/h3>
&lt;p>It’s common for an application to depend on an external HTTP-based web service. The dependency could be external to the company and controlled by a 3rd party e.g. Twitter.&lt;/p>
&lt;p>&lt;img alt="3rd-party" src="https://www.nickebbitt.com/blog/2017/01/01/making-a-mockery-of-web-services/3rd-party.png">&lt;/p>
&lt;p>It could be a separate service from within the same organisation but controlled by a different team. It is quite common for microservices to communicate over HTTP.&lt;/p>
&lt;p>&lt;img alt="microservices" src="https://www.nickebbitt.com/blog/2017/01/01/making-a-mockery-of-web-services/microservices.png">&lt;/p>
&lt;h2 id="introducing-wiremock">Introducing WireMock&lt;/h2>
&lt;p>There are various tools or frameworks available that support the mocking of HTTP-based APIs &amp;amp; web services. WireMock is one such framework that we will explore in more detail having used to good effect to support the development and automated testing of the mobile platform described in the intro.&lt;/p>
&lt;p>&lt;a href="http://wiremock.org/">WireMock&lt;/a> was created in 2011 by &lt;a href="http://www.tomakehurst.com/about/">Tom Akehurst&lt;/a>, a software engineer based in the south of England.&lt;/p>
&lt;p>The framework is mature (v2.4.1 at the time of writing), &lt;a href="https://github.com/tomakehurst/wiremock">open source&lt;/a> and hosted on GitHub.&lt;/p>
&lt;p>The documentation for WireMock is very good providing useful descriptions of the available features and plenty of examples to get you started.&lt;/p>
&lt;h3 id="deployment">Deployment&lt;/h3>
&lt;p>In its simplest form WireMock comes as a runnable JAR that can be started from the command line. This mode has proven to be very useful during development providing a reliable web service running on your local machine to develop changes against.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ java -jar wiremock-standalone-2.1.1.jar --port 9999
&lt;/code>&lt;/pre>&lt;p>Alternatively, WireMock can be deployed to a servlet container such as Tomcat if that’s your preference.&lt;/p>
&lt;p>There is also a comprehensive Java API from which you can create an embedded WireMock server and configure as required.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>WireMockServer wireMockServer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> WireMockServer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wireMockServer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, and more interesting from a Java testing perspective, WireMock provides JUnit integration using the @Rule annotation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Rule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> WireMockRule wireMockRule &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> WireMockRule(9999);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="key-features">Key features&lt;/h3>
&lt;p>I&amp;rsquo;ll simply highlight the main features here, for more details the official &lt;a href="http://wiremock.org/docs/">docs&lt;/a> are the place to go. The code samples here are taken directly from the official docs.&lt;/p>
&lt;p>&lt;em>Stubbing&lt;/em> allows you to pre-define a canned response from the mock service that will be served when a request is made that matches a specific URL pattern.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">exactUrlOnly&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stubFor(get(urlEqualTo(&lt;span style="color:#e6db74">&amp;#34;/some/thing&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">willReturn&lt;/span>(aResponse()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;text/plain&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withBody&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello world!&amp;#34;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(testClient.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/some/thing&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">statusCode&lt;/span>(), is(200));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(testClient.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/some/thing/else&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">statusCode&lt;/span>(), is(404));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Verifying&lt;/em> allows you to prove that your application has interacted with the mock service in the way that you require it to.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>verify(postRequestedFor(urlEqualTo(&lt;span style="color:#e6db74">&amp;#34;/verify/this&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>, equalTo(&lt;span style="color:#e6db74">&amp;#34;text/xml&amp;#34;&lt;/span>)));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Proxying&lt;/em> provides the ability for WireMock to selectively proxy requests to other hosts. This also supports the ability to record and playback interactions with the a service that it is proxying to. I found this a great way to create a base set of request mappings for use in development or to support your test suite.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>stubFor(get(urlMatching(&lt;span style="color:#e6db74">&amp;#34;/other/service/.*&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">willReturn&lt;/span>(aResponse().&lt;span style="color:#a6e22e">proxiedFrom&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://otherhost.com/approot&amp;#34;&lt;/span>)));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The ability to &lt;em>simulate faults&lt;/em> is very useful, particularly when it comes to testing how resilient your application is to failures or inconsistent behaviour of its external dependencies. One example would be to add a delay to the interaction with the mock service to prove that your app behaves as expected.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>stubFor(get(urlEqualTo(&lt;span style="color:#e6db74">&amp;#34;/delayed&amp;#34;&lt;/span>)).&lt;span style="color:#a6e22e">willReturn&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aResponse()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withStatus&lt;/span>(200)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">withFixedDelay&lt;/span>(2000)));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Stateful behaviour&lt;/em> provides a way to interact with the mock service and have it alter it’s state based on the interactions made. It allows WireMock to act as a state machine that can move through various states during a test to allow more complex scenarios to be modeled.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Through the use of a tool such as WireMock we were able to reduce our dependencies on the real service being available. This has not only been valuable during the execution of our automated test suite but has provided additional benefit during development with us realising an increase in developer productivity due to not being reliant on the “real” service being available and working as expected.&lt;/p>
&lt;p>We have also been able to significantly improve the testability of the application, allowing us to create new tests for new features with less effort.&lt;/p>
&lt;p>This has ultimately resulted in higher quality product being delivered more regularly and efficiently.&lt;/p></content></item><item><title>JCrete 2016</title><link>https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/</link><pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/</guid><description>In late 2015 I arranged for Heinz Kabutz (Java Champion and the man behind javaspecialists.eu) to visit the company I work for and teach his Java Specialist Master course to my team.
The training was great but a nice bonus for myself was a personal invite from Heinz to attend the Java focused JCrete Unconference he runs on the Greek island of, you guessed it, Crete.
The invite put me into the hat to attend the unconference and I was lucky enough to be one of those picked out to attend.</description><content>&lt;p>In late 2015 I arranged for Heinz Kabutz (Java Champion and the man behind &lt;a href="http://javaspecialists.eu/">javaspecialists.eu&lt;/a>) to visit the company I work for and teach his Java Specialist Master course to my team.&lt;/p>
&lt;p>The training was great but a nice bonus for myself was a personal invite from Heinz to attend the Java focused &lt;a href="http://www.jcrete.org/">JCrete Unconference&lt;/a> he runs on the Greek island of, you guessed it, Crete.&lt;/p>
&lt;p>&lt;img alt="JCrete Unconference" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/jCreteUnconf.svg">&lt;/p>
&lt;p>The invite put me into the hat to attend the unconference and I was lucky enough to be one of those picked out to attend. It was an offer too good to refuse so I accepted and decided to worry about the money side of it later.&lt;/p>
&lt;p>It turned out to be a great decision and one of the most, if not the most, rewarding weeks of my career.&lt;/p>
&lt;p>As the conference grew nearer the thought of joining up with so many talented people from the Java community was quite daunting. I believe at least 20% of attendees were Java Champions and many had made very important contributions to the Java ecosystem.&lt;/p>
&lt;p>The setting for the conference was the Orthodox Academy of Crete (OAC) located in a small fishing village called Kolymbari on the north coast of the island. Most attendees stayed at the OAC, as well as it hosting the majority of the conference sessions.&lt;/p>
&lt;p>&lt;img alt="The OAC in the distance&amp;hellip;" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/the_oac.png">&lt;/p>
&lt;p>I arrived in Kolymbari a day before the conference started so decided to acclimatise to the heat by taking a stroll down the sea front. I was passing the strip of restaurants and heard the mention of GlassFish from one of the tables. With a Java conference happening in the same town I knew this was no coincidence so approached the table and asked &amp;ldquo;Did someone just say GlassFish?&amp;rdquo;. Luckily they had and I didn&amp;rsquo;t look daft. The Java people in question were actually members of the Netbeans dream team, Zoran Sevarac, Toni Epple and Geertjan Wielenga. Interestingly the reason they were talking about GlassFish was actually nothing to do with Java, but rather a &lt;a href="http://www.herminedeurloo.com/cds/glass-fish/">Jazz harmonica album created by Geertjan&amp;rsquo;s partner&lt;/a>.&lt;/p>
&lt;p>Following the fortunate meetup Zoran, Toni and I decided to sample a few local &amp;ldquo;Cocktails on the Rocks!&amp;rdquo;. This set the scene for the coming week - the friendliness from these people I&amp;rsquo;d only just met was superb and the laughs pretty much started here and continued throughout.&lt;/p>
&lt;p>&lt;img alt="Cocktails on the Rocks!" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/cocktails_on_the_rocks.png">&lt;/p>
&lt;p>The day before the conference started for real quite a few people had already arrived so we all pitched in helping to set up the various rooms at the OAC for the sessions to come. The rooms (or spaces) were all given names such as &amp;ldquo;The Stage&amp;rdquo;, &amp;ldquo;The Library&amp;rdquo;, &amp;ldquo;The Printing Room&amp;rdquo; and &amp;ldquo;The Lounge&amp;rdquo;. There were also some more informal breakout areas such as &amp;ldquo;The Beach&amp;rdquo; and &amp;ldquo;Under the Vines&amp;rdquo;. Most importantly we also received our well travelled JCrete towels to use on excursions to the beach to dry off after any sea based discussions we were involved in.&lt;/p>
&lt;p>On the first day proper of the conference 80 or so of us gathered in the main room at the OAC. Heinz and co set the scene for the week giving us an idea of what to expect.&lt;/p>
&lt;p>&lt;img alt="Introductions" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/intro.png">&lt;/p>
&lt;p>A great statement from this was that &amp;ldquo;whatever happens was the only thing that was supposed to happen&amp;rdquo;.&lt;/p>
&lt;p>Following on from JCrete there is also the JCrete4Kids days which support the local school children. Some of the kids turned up to say thank you for the amazing contributions to their school from previous years. It&amp;rsquo;s great to see the impact something that may seem trivial to me or you can have on a child&amp;rsquo;s education.&lt;/p>
&lt;p>The way the unconference format worked was that at the beginning of each day attendees would propose any sessions they wish to run. Sessions could be presentations, practicals, discussions - basically whatever. The sessions would then be voted on and organised into time slots for each room. We would generally have sessions planned for the morning to allow for excursions in the afternoon, except one day where we would switch it around to head out at the crack of dawn to an amazing beach at Elafonnisi.&lt;/p>
&lt;p>&lt;img alt="Sessions planning" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/session_planning.png">&lt;/p>
&lt;p>There were so many great sessions but I&amp;rsquo;ll briefly summarise a couple of my favourites&amp;hellip;&lt;/p>
&lt;p>The first session I attended was on Java Collections / &lt;a href="https://projects.eclipse.org/proposals/eclipse-collections">Eclipse Collections&lt;/a>. Now this was really interesting as in the session were Don Raab who is project lead for Eclipse Collections and also Stuart Marks who has made significant contributions to the Java Collections library including the recent Java 8 Streams API. It was great to listen to these very knowledgeable people discuss various details of the implementation of each library and other related subjects.&lt;/p>
&lt;p>Another session I thought summed up the whole JCrete ethos was Dan North&amp;rsquo;s JGoTesting. Dan demonstrated an idea he had been working on to provide an enhancement to the Java unit testing landscape influenced by some of his experiences writing tests in the Go programming language. A couple of features that really stood out for me were the ability to continue following a failed assertion, and reducing the noise of testing output to only log out when a failure occurs. The reason this session summed JCrete up for me was that following on from the session, with some help from other JCrete attendees, Dan evolved his idea and initial implementation as a library into a working prototype implemented as a JUnit rule. The fruits of this can be seen on the project&amp;rsquo;s &lt;a href="https://gitlab.com/tastapod/jgotesting">GitLab page&lt;/a>.&lt;/p>
&lt;p>An enlightening talk/discussion was held by Tomaz Nurkiewicz in the Hackergarten on the topic of Synchronous vs Asynchronous Microservices. I found this particularly useful as it was the first time I&amp;rsquo;d really discussed the idea of using an event store to implement asynchronous communications between services. It is a concept that now understood makes lots of sense for a particular problem I&amp;rsquo;ve been working on recently. This session gave me some new ideas to explore.&lt;/p>
&lt;p>The final session worth mentioning was the one I proposed on Actor Model, and specifically &lt;a href="http://akka.io/">Akka&lt;/a>. The previous day I had introduced myself to Jonas Boner (creator of Akka) and Viktor Klang and we had some great discussions about Actor Model, Akka and general software development. Up until this point I hadn&amp;rsquo;t had the balls to propose a topic but following some encouragement from Jonas I decided to propose a talk on Actor Model the next morning. Luckily (and scarily) it was accepted and planned in. Fortunately a good few people turned up and we had a great discussion around the concepts of Actor Model and the benefits it can offer a distributed system. All my experience up to this point had been using Akka in a single JVM and leaning on the toolkit for the benefits it provides in relation to concurrency. A new concept to me that Jonas emphasised was the nature of an actor having the property of location transparency due to the way they are referenced by their path. The idea that it doesn&amp;rsquo;t matter if the actor you are sending a message to is on the same JVM, the same machine, the same network or somewhere else entirely to where you are sending a message from is a really powerful concept.&lt;/p>
&lt;p>&lt;img alt="Actor Model" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/actor-model.png">&lt;/p>
&lt;p>The planned technical sessions though are only half the story about JCrete. The excursions take JCrete to the next level in terms of value and enjoyment.&lt;/p>
&lt;p>The excursions were a great opportunity to continue discussions further, sometimes whilst floating in the sea&amp;hellip;&lt;/p>
&lt;p>&lt;img alt="Java in the sea" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/java-in-the-sea.png">&lt;/p>
&lt;p>The most memorable of the excursions has to be the early morning start to Elafonnisi. It was about 1 1/2 hours from Kolymbari and the roads were best suited to 4x4 vehicles. Following the journey over there we then had a 20 minute hike down to the beach but boy was it worth it. The beach was empty, the views fantastic and there was simply a huge feeling of well being and relaxation. The reason we went early was to avoid the crowds and this turned out be a very good idea as when we were heading home at around 11am the tourists were flocking in and it simply wouldn&amp;rsquo;t have been the same had we come later. I&amp;rsquo;ve nicked the following picture from &lt;a href="https://www.flickr.com/photos/steveonjava/sets/72157671155561551">Stephen Chin&amp;rsquo;s collection&lt;/a> as the ones I took wouldn&amp;rsquo;t have done it justice.&lt;/p>
&lt;p>&lt;img alt="Elafonnisi" src="https://www.nickebbitt.com/blog/2016/11/29/jcrete-2016/elafonnisi.png">&lt;/p>
&lt;p>There were other great excursions to various beaches and a great time was had in Chania Old Town for a meal one evening where there seemed to be an endless supply of top quality food costing hardly anything - good times! I was also fortunate to have a mini tour of the area whilst helping Heinz collect supplies for the BBQ we had on the last evening.&lt;/p>
&lt;p>Speaking of the BBQ, what a great evening that was! The food was tasty and plentiful, there was music provided by Heinz&amp;rsquo;s son&amp;rsquo;s band (Core the Band) and also a few songs (&amp;ldquo;Java Java People&amp;rdquo;) performed by the Java band known as the Null Pointers led by Zoran. A brilliant time was had by all and it was a great way to celebrate an amazing week at JCrete.&lt;/p>
&lt;p>Wrapping up this rather lengthy and rambling post I just want to say thanks to Heinz and all others behind the scenes making JCrete possible and thanks to all the people I met for being so welcoming and making JCrete what it is. I feel privileged to have been a part of it.&lt;/p>
&lt;p>I&amp;rsquo;m still feeling the pain on my bank balance now but it was definitely worth it!&lt;/p></content></item><item><title>Tomcat access logs in SpringBoot</title><link>https://www.nickebbitt.com/blog/2016/09/19/tomcat-access-logs-in-springboot/</link><pubDate>Mon, 19 Sep 2016 20:03:11 +0000</pubDate><guid>https://www.nickebbitt.com/blog/2016/09/19/tomcat-access-logs-in-springboot/</guid><description>If you&amp;rsquo;re running your SpringBoot app using Embedded Tomcat it may be useful to generate the access logs.
To do this add the following config to your application.properties file:
server.tomcat.accesslog.enabled=true server.tomcat.basedir=tomcat Alternatively, the property values can be passed as command line options.
The result will be a new directory called tomcat at the same level as the JAR under which your logs will be created.
SpringBoot version: 1.4.0-RELEASE</description><content>&lt;p>If you&amp;rsquo;re running your SpringBoot app using Embedded Tomcat it may be useful to generate the access logs.&lt;/p>
&lt;p>To do this add the following config to your application.properties file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>server.&lt;span style="color:#a6e22e">tomcat&lt;/span>.&lt;span style="color:#a6e22e">accesslog&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server.&lt;span style="color:#a6e22e">tomcat&lt;/span>.&lt;span style="color:#a6e22e">basedir&lt;/span>&lt;span style="color:#f92672">=&lt;/span>tomcat&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Alternatively, the property values can be passed as command line options.&lt;/p>
&lt;p>The result will be a new directory called tomcat at the same level as the JAR under which your logs will be created.&lt;/p>
&lt;p>SpringBoot version: &lt;code>1.4.0-RELEASE&lt;/code>&lt;/p></content></item><item><title>CIDR by example</title><link>https://www.nickebbitt.com/blog/1/01/01/cidr-by-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.nickebbitt.com/blog/1/01/01/cidr-by-example/</guid><description>Key takeaways:
what is CIDR? IPv4 subnet mask single IP /24 range</description><content>&lt;p>Key takeaways:&lt;/p>
&lt;ul>
&lt;li>what is CIDR?&lt;/li>
&lt;li>IPv4&lt;/li>
&lt;li>subnet mask&lt;/li>
&lt;li>single IP&lt;/li>
&lt;li>/24 range&lt;/li>
&lt;/ul></content></item></channel></rss>